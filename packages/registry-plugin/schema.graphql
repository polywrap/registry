#import { Connection, Query, TxResponse, Mutation } into Ethereum from "w3://ens/ethereum.web3api.eth"
#import { Query, Mutation } into RegistryContract from "w3://ens/rinkeby/polywrap-registry-contract.eth"

type Query {
  domainOwner(
    connection: Ethereum_Connection!
    address: String!
    domainRegistry: String!
    domainName: String!
  ): String!

  # domainRegistryLinks(
  #   connection: Ethereum_Connection!
  #   address: String!
  #   domainRegistry: String!
  # ): String!

  latestPrereleaseLocation(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    partialVersion: String!
  ): String!

  latestPrereleaseNode(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    partialVersion: String!
  ): String!

  latestReleaseLocation(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    partialVersion: String!
  ): String!

  latestReleaseNode(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    partialVersion: String!
  ): String!

  organization(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
  ): OrganizationInfo!

  organizationExists(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
  ): Boolean!

  organizationOwner(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
  ): String!

  organizationController(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
  ): String!

  getPackage(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
  ): PackageMetadata!

  buildPackageInfo(
    domainRegistry: String!
    domainName: String!
    packageName: String!
  ): PackageInfo!

  packageExists(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
  ): Boolean!

  packageOrganizationId(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
  ): String!

  packageOwner(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
  ): String!

  packageController(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
  ): String!

  version(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    partialVersion: String!
  ): VersionInfo!

  versionExists(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    partialVersion: String!
  ): Boolean!

  versionBuildMetadata(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    version: String!
  ): String!

  versionLocation(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    version: String!
  ): String!

  versionMetadata(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    partialVersion: String!
  ): VersionNodeMetadata!
}

type OrganizationInfo {
  exists: Boolean!
  owner: String!
  controller: String!
}

type PackageMetadata {
  exists: Boolean!
  owner: String
  controller: String
  organizationId: String
}

type PackageInfo {
  packageId: String!
  packageName: String!
  organizationId: String!
}

type VersionInfo {
  exists: Boolean
  leaf: Boolean
  level: UInt8
  latestPrereleaseVersion: BigInt
  latestReleaseVersion: BigInt
  buildMetadata: String
  location: String
}

type VersionNodeMetadata {
  exists: Boolean!
  leaf: Boolean!
  level: UInt8!
  latestPrereleaseVersion: BigInt!
  latestReleaseVersion: BigInt!
}

type Mutation {
  claimOrganizationOwnership(
    connection: Ethereum_Connection!
    address: String!
    domainRegistry: String!
    domainName: String!
    newOwner: String!
  ): Ethereum_TxResponse!

  publishVersion(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    version: String!
    buildMetadata: String!
    location: String!
  ): Ethereum_TxResponse!

  registerPackage(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
    packageName: String!
    packageOwner: String!
    packageController: String!
  ): Ethereum_TxResponse!

  setOrganizationController(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
    newController: String!
  ): Ethereum_TxResponse!

  setPackageController(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    newController: String!
  ): Ethereum_TxResponse!

  setPackageOwner(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    newOwner: String!
  ): Ethereum_TxResponse!

  transferOrganizationControl(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
    newController: String!
  ): Ethereum_TxResponse!

  transferOrganizationOwnership(
    connection: Ethereum_Connection!
    address: String!
    organizationId: String!
    newOwner: String!
  ): Ethereum_TxResponse!

  transferPackageControl(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    newController: String!
  ): Ethereum_TxResponse!

  transferPackageOwnership(
    connection: Ethereum_Connection!
    address: String!
    packageId: String!
    newOwner: String!
  ): Ethereum_TxResponse!
}
