/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestLink, TestLinkInterface } from "../TestLink";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domainRegistryNode",
        type: "bytes32",
      },
    ],
    name: "getPolywrapOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610164806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806331ac1d0d14610030575b600080fd5b61004a600480360381019061004591906100a5565b610060565b6040516100579190610113565b60405180910390f35b6000329050919050565b600080fd5b6000819050919050565b6100828161006f565b811461008d57600080fd5b50565b60008135905061009f81610079565b92915050565b6000602082840312156100bb576100ba61006a565b5b60006100c984828501610090565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100fd826100d2565b9050919050565b61010d816100f2565b82525050565b60006020820190506101286000830184610104565b9291505056fea264697066735822122070b37d14763a8fe846bec7038c776bacc2d11a44d6f26f5b7d381a1fc256e53464736f6c634300080a0033";

type TestLinkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLinkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLink__factory extends ContractFactory {
  constructor(...args: TestLinkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestLink> {
    return super.deploy(overrides || {}) as Promise<TestLink>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestLink {
    return super.attach(address) as TestLink;
  }
  connect(signer: Signer): TestLink__factory {
    return super.connect(signer) as TestLink__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLinkInterface {
    return new utils.Interface(_abi) as TestLinkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLink {
    return new Contract(address, _abi, signerOrProvider) as TestLink;
  }
}
