/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VerificationTreeManager,
  VerificationTreeManagerInterface,
} from "../VerificationTreeManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_votingMachine",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "verificationRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "verifiedVersionCount",
        type: "uint256",
      },
    ],
    name: "VerificationRootCalculated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "patchNodeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "packageLocationHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "verifiedVersionIndex",
        type: "uint256",
      },
    ],
    name: "VersionVerified",
    type: "event",
  },
  {
    inputs: [],
    name: "calculateVerificationRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_votingMachine",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "patchNodeId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "packageLocationHash",
        type: "bytes32",
      },
    ],
    name: "onVersionVerified",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "updateRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_verificationRootRelayer",
        type: "address",
      },
    ],
    name: "updateVerificationRootRelayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_votingMachine",
        type: "address",
      },
    ],
    name: "updateVotingMachine",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verificationRootRelayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifiedVersionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "votingMachine",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001aaa38038062001aaa8339818101604052810190620000379190620005d9565b6200004982826200005160201b60201c565b5050620006c9565b600060019054906101000a900460ff168062000078575060008054906101000a900460ff16155b620000ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b190620006a7565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200010b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200011b620001c460201b60201c565b82606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015620001bf5760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680620001eb575060008054906101000a900460ff16155b6200022d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022490620006a7565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200027e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200028e620002c360201b60201c565b6200029e620003a260201b60201c565b8015620002c05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620002ea575060008054906101000a900460ff16155b6200032c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200032390620006a7565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200037d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156200039f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620003c9575060008054906101000a900460ff16155b6200040b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200040290620006a7565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200045c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200047c62000470620004a160201b60201c565b620004a960201b60201c565b80156200049e5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005a18262000574565b9050919050565b620005b38162000594565b8114620005bf57600080fd5b50565b600081519050620005d381620005a8565b92915050565b60008060408385031215620005f357620005f26200056f565b5b60006200060385828601620005c2565b92505060206200061685828601620005c2565b9150509250929050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006200068f602e8362000620565b91506200069c8262000631565b604082019050919050565b60006020820190508181036000830152620006c28162000680565b9050919050565b6113d180620006d96000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063485cc9551161008c5780638da5cb5b116100665780638da5cb5b146101c6578063d4cf2426146101e4578063f2fde38b14610200578063f9e5eafd1461021c576100cf565b8063485cc95514610182578063715018a61461019e5780637b103999146101a8576100cf565b80630cfb0b4c146100d45780630e4c9807146100f25780631a5da6c81461010e5780632d33d2e31461012a57806330b321a3146101465780633edf7ca114610164575b600080fd5b6100dc61023a565b6040516100e99190610f28565b60405180910390f35b61010c60048036038101906101079190610fa6565b610392565b005b61012860048036038101906101239190610fa6565b610452565b005b610144600480360381019061013f9190610fa6565b610512565b005b61014e6105d2565b60405161015b9190610fec565b60405180910390f35b61016c6105d8565b6040516101799190611016565b60405180910390f35b61019c60048036038101906101979190611031565b6105fe565b005b6101a6610763565b005b6101b06107eb565b6040516101bd9190611016565b60405180910390f35b6101ce610811565b6040516101db9190611016565b60405180910390f35b6101fe60048036038101906101f9919061109d565b61083b565b005b61021a60048036038101906102159190610fa6565b61097d565b005b610224610a75565b6040516102319190611016565b60405180910390f35b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029a576102996110dd565b5b60008060001b905060005b6065600001548111610350576000801b60656001016000838152602001908152602001600020541461033d576000801b8214156102fa576065600101600082815260200190815260200160002054915061033c565b60656001016000828152602001908152602001600020548260405160200161032392919061112d565b6040516020818303038152906040528051906020012091505b5b808061034890611188565b9150506102a5565b817f1210df8b43a93ad809714edb0b1ea72f9dff7e13a9dbae46be35aa7028816ff1606a546040516103829190610fec565b60405180910390a2819250505090565b61039a610a9b565b73ffffffffffffffffffffffffffffffffffffffff166103b8610811565b73ffffffffffffffffffffffffffffffffffffffff161461040e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104059061122e565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61045a610a9b565b73ffffffffffffffffffffffffffffffffffffffff16610478610811565b73ffffffffffffffffffffffffffffffffffffffff16146104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c59061122e565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61051a610a9b565b73ffffffffffffffffffffffffffffffffffffffff16610538610811565b73ffffffffffffffffffffffffffffffffffffffff161461058e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105859061122e565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606a5481565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1680610624575060008054906101000a900460ff16155b610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a906112c0565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106b3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106bb610aa3565b82606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561075e5760008060016101000a81548160ff0219169083151502179055505b505050565b61076b610a9b565b73ffffffffffffffffffffffffffffffffffffffff16610789610811565b73ffffffffffffffffffffffffffffffffffffffff16146107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d69061122e565b60405180910390fd5b6107e96000610b8c565b565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610899576108986110dd565b5b6108a38282610c52565b817f44cf500ed65246b251b99ffc28936276be48ac9b2699cb7e44831623c721da0582606a546040516108d79291906112e0565b60405180910390a2606a60008154809291906108f290611188565b9190505550606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e644e2966040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096157600080fd5b505af1158015610975573d6000803e3d6000fd5b505050505050565b610985610a9b565b73ffffffffffffffffffffffffffffffffffffffff166109a3610811565b73ffffffffffffffffffffffffffffffffffffffff16146109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f09061122e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a609061137b565b60405180910390fd5b610a7281610b8c565b50565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060019054906101000a900460ff1680610ac9575060008054906101000a900460ff16155b610b08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aff906112c0565b60405180910390fd5b60008060019054906101000a900460ff161590508015610b58576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b60610d4d565b610b68610e26565b8015610b895760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008282604051602001610c6792919061112d565b60405160208183030381529060405280519060200120905060005b6000801b606560010160008381526020019081526020016000205414610d1457606560010160008281526020019081526020016000205482604051602001610ccb92919061112d565b6040516020818303038152906040528051906020012091506000801b60656001016000838152602001908152602001600020819055508080610d0c90611188565b915050610c82565b816065600101600083815260200190815260200160002081905550606560000154811115610d4757806065600001819055505b50505050565b600060019054906101000a900460ff1680610d73575060008054906101000a900460ff16155b610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da9906112c0565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e02576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610e235760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610e4c575060008054906101000a900460ff16155b610e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e82906112c0565b60405180910390fd5b60008060019054906101000a900460ff161590508015610edb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610eeb610ee6610a9b565b610b8c565b8015610f0c5760008060016101000a81548160ff0219169083151502179055505b50565b6000819050919050565b610f2281610f0f565b82525050565b6000602082019050610f3d6000830184610f19565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f7382610f48565b9050919050565b610f8381610f68565b8114610f8e57600080fd5b50565b600081359050610fa081610f7a565b92915050565b600060208284031215610fbc57610fbb610f43565b5b6000610fca84828501610f91565b91505092915050565b6000819050919050565b610fe681610fd3565b82525050565b60006020820190506110016000830184610fdd565b92915050565b61101081610f68565b82525050565b600060208201905061102b6000830184611007565b92915050565b6000806040838503121561104857611047610f43565b5b600061105685828601610f91565b925050602061106785828601610f91565b9150509250929050565b61107a81610f0f565b811461108557600080fd5b50565b60008135905061109781611071565b92915050565b600080604083850312156110b4576110b3610f43565b5b60006110c285828601611088565b92505060206110d385828601611088565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000819050919050565b61112761112282610f0f565b61110c565b82525050565b60006111398285611116565b6020820191506111498284611116565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061119382610fd3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111c6576111c5611159565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006112186020836111d1565b9150611223826111e2565b602082019050919050565b600060208201905081810360008301526112478161120b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006112aa602e836111d1565b91506112b58261124e565b604082019050919050565b600060208201905081810360008301526112d98161129d565b9050919050565b60006040820190506112f56000830185610f19565b6113026020830184610fdd565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006113656026836111d1565b915061137082611309565b604082019050919050565b6000602082019050818103600083015261139481611358565b905091905056fea26469706673582212205ec4c11eed5ffe64c142e271cceba58f412860a2553d3e4a5307d56b3fe8266364736f6c634300080a0033";

type VerificationTreeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerificationTreeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerificationTreeManager__factory extends ContractFactory {
  constructor(...args: VerificationTreeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _registry: string,
    _votingMachine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VerificationTreeManager> {
    return super.deploy(
      _registry,
      _votingMachine,
      overrides || {}
    ) as Promise<VerificationTreeManager>;
  }
  getDeployTransaction(
    _registry: string,
    _votingMachine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _registry,
      _votingMachine,
      overrides || {}
    );
  }
  attach(address: string): VerificationTreeManager {
    return super.attach(address) as VerificationTreeManager;
  }
  connect(signer: Signer): VerificationTreeManager__factory {
    return super.connect(signer) as VerificationTreeManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerificationTreeManagerInterface {
    return new utils.Interface(_abi) as VerificationTreeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerificationTreeManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as VerificationTreeManager;
  }
}
