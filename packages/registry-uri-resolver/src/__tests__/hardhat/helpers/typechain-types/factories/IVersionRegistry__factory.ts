/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IVersionRegistry,
  IVersionRegistryInterface,
} from "../IVersionRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "trustedVersionPublisher",
        type: "address",
      },
    ],
    name: "TrustedVersionPublisherSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "packageId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "versionNodeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "versionBytes",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "buildMetadata",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "location",
        type: "string",
      },
    ],
    name: "VersionPublished",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "packageId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "versionBytes",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "buildMetadata",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "location",
        type: "string",
      },
    ],
    name: "publishVersion",
    outputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    name: "version",
    outputs: [
      {
        internalType: "bool",
        name: "leaf",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "created",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "latestPrereleaseVersion",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "latestReleaseVersion",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "buildMetadata",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "location",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    name: "versionBuildMetadata",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "packageId",
        type: "bytes32",
      },
    ],
    name: "versionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "packageId",
        type: "bytes32",
      },
    ],
    name: "versionExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "packageId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "versionIds",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    name: "versionLocation",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "versionNodeId",
        type: "bytes32",
      },
    ],
    name: "versionMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "leaf",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "level",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "latestPrereleaseVersion",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "latestReleaseVersion",
            type: "uint256",
          },
        ],
        internalType: "struct IVersionRegistry.VersionNodeMetadata",
        name: "nodeMetadata",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IVersionRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IVersionRegistryInterface {
    return new utils.Interface(_abi) as IVersionRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVersionRegistry {
    return new Contract(address, _abi, signerOrProvider) as IVersionRegistry;
  }
}
