/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IVersionResolver,
  IVersionResolverInterface,
} from "../IVersionResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "versionNodeId",
        type: "bytes32",
      },
    ],
    name: "latestPrereleaseLocation",
    outputs: [
      {
        internalType: "string",
        name: "location",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "versionNodeId",
        type: "bytes32",
      },
    ],
    name: "latestPrereleaseNode",
    outputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "versionNodeId",
        type: "bytes32",
      },
    ],
    name: "latestReleaseLocation",
    outputs: [
      {
        internalType: "string",
        name: "location",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "versionNodeId",
        type: "bytes32",
      },
    ],
    name: "latestReleaseNode",
    outputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IVersionResolver__factory {
  static readonly abi = _abi;
  static createInterface(): IVersionResolverInterface {
    return new utils.Interface(_abi) as IVersionResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVersionResolver {
    return new Contract(address, _abi, signerOrProvider) as IVersionResolver;
  }
}
