/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestLink, TestLinkInterface } from "../TestLink";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domainRegistryNode",
        type: "bytes32",
      },
    ],
    name: "getPolywrapOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806331ac1d0d14610030575b600080fd5b61004a6004803603810190610045919061007f565b610060565b60405161005791906100b7565b60405180910390f35b6000329050919050565b6000813590506100798161010e565b92915050565b60006020828403121561009157600080fd5b600061009f8482850161006a565b91505092915050565b6100b1816100d2565b82525050565b60006020820190506100cc60008301846100a8565b92915050565b60006100dd826100ee565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610117816100e4565b811461012257600080fd5b5056fea264697066735822122080904b1473de048ffc700a8e0f1819d0fe66f631389417ff4fee1e5b3b732f3a64736f6c63430008040033";

export class TestLink__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestLink> {
    return super.deploy(overrides || {}) as Promise<TestLink>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestLink {
    return super.attach(address) as TestLink;
  }
  connect(signer: Signer): TestLink__factory {
    return super.connect(signer) as TestLink__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLinkInterface {
    return new utils.Interface(_abi) as TestLinkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLink {
    return new Contract(address, _abi, signerOrProvider) as TestLink;
  }
}
