/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IOrganizationOwnershipManagerInterface
  extends utils.Interface {
  functions: {
    "claimOrganizationOwnership(bytes32,bytes32,address)": FunctionFragment;
    "domainOwner(bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimOrganizationOwnership",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainOwner",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimOrganizationOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainOwner",
    data: BytesLike
  ): Result;

  events: {
    "OrganizationOwnershipClaimed(bytes32,bytes32,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "OrganizationOwnershipClaimed"
  ): EventFragment;
}

export type OrganizationOwnershipClaimedEvent = TypedEvent<
  [string, string, string, string],
  {
    domainRegistry: string;
    domainRegistryNode: string;
    domainOwner: string;
    newOrganizationOwner: string;
  }
>;

export type OrganizationOwnershipClaimedEventFilter =
  TypedEventFilter<OrganizationOwnershipClaimedEvent>;

export interface IOrganizationOwnershipManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOrganizationOwnershipManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  claimOrganizationOwnership(
    domainRegistry: BytesLike,
    domainRegistryNode: BytesLike,
    newOrganizationOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainOwner(
    domainRegistry: BytesLike,
    domainRegistryNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OrganizationOwnershipClaimed(bytes32,bytes32,address,address)"(
      domainRegistry?: BytesLike | null,
      domainRegistryNode?: BytesLike | null,
      domainOwner?: null,
      newOrganizationOwner?: null
    ): OrganizationOwnershipClaimedEventFilter;
    OrganizationOwnershipClaimed(
      domainRegistry?: BytesLike | null,
      domainRegistryNode?: BytesLike | null,
      domainOwner?: null,
      newOrganizationOwner?: null
    ): OrganizationOwnershipClaimedEventFilter;
  };

  estimateGas: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
