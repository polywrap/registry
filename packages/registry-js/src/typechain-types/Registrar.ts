/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RegistrarInterface extends utils.Interface {
  functions: {
    "addManager(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isAuthorized(bytes32,address)": FunctionFragment;
    "managers(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeVersion(bytes32,uint256,uint256,uint256,string)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeManager(bytes32,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry(address)": FunctionFragment;
    "updateVotingMachine(address)": FunctionFragment;
    "votingMachine()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addManager",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "managers", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeVersion",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingMachine",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingMachine",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingMachine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingMachine",
    data: BytesLike
  ): Result;

  events: {
    "ManagerAdded(bytes32,address)": EventFragment;
    "ManagerRemoved(bytes32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ManagerAddedEvent = TypedEvent<
  [string, string],
  { packageId: string; manager: string }
>;

export type ManagerAddedEventFilter = TypedEventFilter<ManagerAddedEvent>;

export type ManagerRemovedEvent = TypedEvent<
  [string, string],
  { packageId: string; manager: string }
>;

export type ManagerRemovedEventFilter = TypedEventFilter<ManagerRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Registrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addManager(
      packageId: BytesLike,
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAuthorized(
      packageId: BytesLike,
      ownerOrManager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    managers(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removeManager(
      packageId: BytesLike,
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVotingMachine(
      _votingMachine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingMachine(overrides?: CallOverrides): Promise<[string]>;
  };

  addManager(
    packageId: BytesLike,
    manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAuthorized(
    packageId: BytesLike,
    ownerOrManager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  managers(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeVersion(
    packageId: BytesLike,
    majorVersion: BigNumberish,
    minorVersion: BigNumberish,
    patchVersion: BigNumberish,
    packageLocation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  removeManager(
    packageId: BytesLike,
    manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVotingMachine(
    _votingMachine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingMachine(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addManager(
      packageId: BytesLike,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_registry: string, overrides?: CallOverrides): Promise<void>;

    isAuthorized(
      packageId: BytesLike,
      ownerOrManager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    managers(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    removeManager(
      packageId: BytesLike,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    updateVotingMachine(
      _votingMachine: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votingMachine(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ManagerAdded(bytes32,address)"(
      packageId?: BytesLike | null,
      manager?: string | null
    ): ManagerAddedEventFilter;
    ManagerAdded(
      packageId?: BytesLike | null,
      manager?: string | null
    ): ManagerAddedEventFilter;

    "ManagerRemoved(bytes32,address)"(
      packageId?: BytesLike | null,
      manager?: string | null
    ): ManagerRemovedEventFilter;
    ManagerRemoved(
      packageId?: BytesLike | null,
      manager?: string | null
    ): ManagerRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addManager(
      packageId: BytesLike,
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAuthorized(
      packageId: BytesLike,
      ownerOrManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managers(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(
      packageId: BytesLike,
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVotingMachine(
      _votingMachine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingMachine(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addManager(
      packageId: BytesLike,
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      packageId: BytesLike,
      ownerOrManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeManager(
      packageId: BytesLike,
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingMachine(
      _votingMachine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingMachine(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
