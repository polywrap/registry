/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VoteStruct = {
  patchNodeId: BytesLike;
  prevMinorNodeId: BytesLike;
  nextMinorNodeId: BytesLike;
  approved: boolean;
};

export type VoteStructOutput = [string, string, string, boolean] & {
  patchNodeId: string;
  prevMinorNodeId: string;
  nextMinorNodeId: string;
  approved: boolean;
};

export interface VotingMachineInterface extends utils.Interface {
  functions: {
    "authorizeVerifiers(address[])": FunctionFragment;
    "authorizedVerifierCount()": FunctionFragment;
    "authorizedVerifiers(address)": FunctionFragment;
    "getPrevAndNextMinorPackageLocations(bytes32)": FunctionFragment;
    "getPrevPatchPackageLocation(bytes32)": FunctionFragment;
    "getProposedVersionVotingInfo(bytes32)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "majorVersionQueueContainers(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeVersion(bytes32,uint256,uint256,uint256,string,address)": FunctionFragment;
    "proposedVersions(bytes32)": FunctionFragment;
    "registrar()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unauthorizeVerifiers(address[])": FunctionFragment;
    "updateRegistrar(address)": FunctionFragment;
    "updateVersionVerifiedListener(address)": FunctionFragment;
    "verifiedMajorVersions(bytes32)": FunctionFragment;
    "verifiedMinorVersions(bytes32)": FunctionFragment;
    "versionVerifiedListener()": FunctionFragment;
    "vote((bytes32,bytes32,bytes32,bool)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorizeVerifiers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedVerifierCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedVerifiers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrevAndNextMinorPackageLocations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrevPatchPackageLocation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedVersionVotingInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "majorVersionQueueContainers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeVersion",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedVersions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unauthorizeVerifiers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistrar",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVersionVerifiedListener",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedMajorVersions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedMinorVersions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionVerifiedListener",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [VoteStruct[]]): string;

  decodeFunctionResult(
    functionFragment: "authorizeVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedVerifierCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrevAndNextMinorPackageLocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrevPatchPackageLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedVersionVotingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "majorVersionQueueContainers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorizeVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVersionVerifiedListener",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedMajorVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedMinorVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionVerifiedListener",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VersionDecided(bytes32,bool,bytes32)": EventFragment;
    "VersionProposed(bytes32,bytes32,uint256,uint256,uint256,string,address)": EventFragment;
    "VersionVote(address,bytes32,bytes32,bool)": EventFragment;
    "VersionVotingStarted(bytes32,bytes32,uint256,uint256,uint256,string,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionDecided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionVotingStarted"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type VersionDecidedEvent = TypedEvent<
  [string, boolean, string],
  { patchNodeId: string; verified: boolean; packageLocationHash: string }
>;

export type VersionDecidedEventFilter = TypedEventFilter<VersionDecidedEvent>;

export type VersionProposedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, string],
  {
    packageId: string;
    patchNodeId: string;
    majorVersion: BigNumber;
    minorVersion: BigNumber;
    patchVersion: BigNumber;
    packageLocation: string;
    proposer: string;
  }
>;

export type VersionProposedEventFilter = TypedEventFilter<VersionProposedEvent>;

export type VersionVoteEvent = TypedEvent<
  [string, string, string, boolean],
  {
    verifier: string;
    patchNodeId: string;
    packageLocationHash: string;
    approved: boolean;
  }
>;

export type VersionVoteEventFilter = TypedEventFilter<VersionVoteEvent>;

export type VersionVotingStartedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, string, boolean],
  {
    packageId: string;
    patchNodeId: string;
    majorVersion: BigNumber;
    minorVersion: BigNumber;
    patchVersion: BigNumber;
    packageLocation: string;
    proposer: string;
    isPatch: boolean;
  }
>;

export type VersionVotingStartedEventFilter =
  TypedEventFilter<VersionVotingStartedEvent>;

export interface VotingMachine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingMachineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizeVerifiers(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizedVerifierCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    authorizedVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPrevAndNextMinorPackageLocations(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        prevMinorNodeId: string;
        prevPackageLocation: string;
        nextMinorNodeId: string;
        nextPackageLocation: string;
      }
    >;

    getPrevPatchPackageLocation(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { prevPackageLocation: string }>;

    getProposedVersionVotingInfo(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        verifierCount: BigNumber;
        approvingVerifierCount: BigNumber;
        rejectingVerifierCount: BigNumber;
      }
    >;

    initialize(
      _registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    majorVersionQueueContainers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { headVersionId: string; tailVersionId: string }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        decided: boolean;
        verified: boolean;
        votingStarted: boolean;
        packageId: string;
        majorNodeId: string;
        minorNodeId: string;
        patchNodeId: string;
        packageLocation: string;
        majorVersion: BigNumber;
        minorVersion: BigNumber;
        patchVersion: BigNumber;
        proposer: string;
      }
    >;

    registrar(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unauthorizeVerifiers(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegistrar(
      _registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVersionVerifiedListener(
      _versionVerifiedListener: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifiedMajorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { lowestMinorNodeId: string }>;

    verifiedMinorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string] & {
        versionNumber: BigNumber;
        nextMinorNodeId: string;
        prevMinorNodeId: string;
        majorNodeId: string;
        patchNodeId: string;
      }
    >;

    versionVerifiedListener(overrides?: CallOverrides): Promise<[string]>;

    vote(
      votes: VoteStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authorizeVerifiers(
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizedVerifierCount(overrides?: CallOverrides): Promise<BigNumber>;

  authorizedVerifiers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPrevAndNextMinorPackageLocations(
    patchNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      prevMinorNodeId: string;
      prevPackageLocation: string;
      nextMinorNodeId: string;
      nextPackageLocation: string;
    }
  >;

  getPrevPatchPackageLocation(
    patchNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposedVersionVotingInfo(
    patchNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      verifierCount: BigNumber;
      approvingVerifierCount: BigNumber;
      rejectingVerifierCount: BigNumber;
    }
  >;

  initialize(
    _registrar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  majorVersionQueueContainers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { headVersionId: string; tailVersionId: string }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeVersion(
    packageId: BytesLike,
    majorVersion: BigNumberish,
    minorVersion: BigNumberish,
    patchVersion: BigNumberish,
    packageLocation: string,
    proposer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedVersions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      decided: boolean;
      verified: boolean;
      votingStarted: boolean;
      packageId: string;
      majorNodeId: string;
      minorNodeId: string;
      patchNodeId: string;
      packageLocation: string;
      majorVersion: BigNumber;
      minorVersion: BigNumber;
      patchVersion: BigNumber;
      proposer: string;
    }
  >;

  registrar(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unauthorizeVerifiers(
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegistrar(
    _registrar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVersionVerifiedListener(
    _versionVerifiedListener: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifiedMajorVersions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  verifiedMinorVersions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string] & {
      versionNumber: BigNumber;
      nextMinorNodeId: string;
      prevMinorNodeId: string;
      majorNodeId: string;
      patchNodeId: string;
    }
  >;

  versionVerifiedListener(overrides?: CallOverrides): Promise<string>;

  vote(
    votes: VoteStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizeVerifiers(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedVerifierCount(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPrevAndNextMinorPackageLocations(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        prevMinorNodeId: string;
        prevPackageLocation: string;
        nextMinorNodeId: string;
        nextPackageLocation: string;
      }
    >;

    getPrevPatchPackageLocation(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposedVersionVotingInfo(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        verifierCount: BigNumber;
        approvingVerifierCount: BigNumber;
        rejectingVerifierCount: BigNumber;
      }
    >;

    initialize(_registrar: string, overrides?: CallOverrides): Promise<void>;

    majorVersionQueueContainers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { headVersionId: string; tailVersionId: string }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      proposer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        decided: boolean;
        verified: boolean;
        votingStarted: boolean;
        packageId: string;
        majorNodeId: string;
        minorNodeId: string;
        patchNodeId: string;
        packageLocation: string;
        majorVersion: BigNumber;
        minorVersion: BigNumber;
        patchVersion: BigNumber;
        proposer: string;
      }
    >;

    registrar(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorizeVerifiers(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistrar(
      _registrar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVersionVerifiedListener(
      _versionVerifiedListener: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiedMajorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    verifiedMinorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string] & {
        versionNumber: BigNumber;
        nextMinorNodeId: string;
        prevMinorNodeId: string;
        majorNodeId: string;
        patchNodeId: string;
      }
    >;

    versionVerifiedListener(overrides?: CallOverrides): Promise<string>;

    vote(votes: VoteStruct[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "VersionDecided(bytes32,bool,bytes32)"(
      patchNodeId?: BytesLike | null,
      verified?: boolean | null,
      packageLocationHash?: null
    ): VersionDecidedEventFilter;
    VersionDecided(
      patchNodeId?: BytesLike | null,
      verified?: boolean | null,
      packageLocationHash?: null
    ): VersionDecidedEventFilter;

    "VersionProposed(bytes32,bytes32,uint256,uint256,uint256,string,address)"(
      packageId?: BytesLike | null,
      patchNodeId?: null,
      majorVersion?: null,
      minorVersion?: null,
      patchVersion?: null,
      packageLocation?: null,
      proposer?: null
    ): VersionProposedEventFilter;
    VersionProposed(
      packageId?: BytesLike | null,
      patchNodeId?: null,
      majorVersion?: null,
      minorVersion?: null,
      patchVersion?: null,
      packageLocation?: null,
      proposer?: null
    ): VersionProposedEventFilter;

    "VersionVote(address,bytes32,bytes32,bool)"(
      verifier?: string | null,
      patchNodeId?: BytesLike | null,
      packageLocationHash?: null,
      approved?: null
    ): VersionVoteEventFilter;
    VersionVote(
      verifier?: string | null,
      patchNodeId?: BytesLike | null,
      packageLocationHash?: null,
      approved?: null
    ): VersionVoteEventFilter;

    "VersionVotingStarted(bytes32,bytes32,uint256,uint256,uint256,string,address,bool)"(
      packageId?: BytesLike | null,
      patchNodeId?: BytesLike | null,
      majorVersion?: null,
      minorVersion?: null,
      patchVersion?: null,
      packageLocation?: null,
      proposer?: null,
      isPatch?: null
    ): VersionVotingStartedEventFilter;
    VersionVotingStarted(
      packageId?: BytesLike | null,
      patchNodeId?: BytesLike | null,
      majorVersion?: null,
      minorVersion?: null,
      patchVersion?: null,
      packageLocation?: null,
      proposer?: null,
      isPatch?: null
    ): VersionVotingStartedEventFilter;
  };

  estimateGas: {
    authorizeVerifiers(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizedVerifierCount(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrevAndNextMinorPackageLocations(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrevPatchPackageLocation(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedVersionVotingInfo(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    majorVersionQueueContainers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unauthorizeVerifiers(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegistrar(
      _registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVersionVerifiedListener(
      _versionVerifiedListener: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifiedMajorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifiedMinorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionVerifiedListener(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      votes: VoteStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeVerifiers(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizedVerifierCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrevAndNextMinorPackageLocations(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrevPatchPackageLocation(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedVersionVotingInfo(
      patchNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    majorVersionQueueContainers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeVersion(
      packageId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      packageLocation: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unauthorizeVerifiers(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistrar(
      _registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVersionVerifiedListener(
      _versionVerifiedListener: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifiedMajorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifiedMinorVersions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionVerifiedListener(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      votes: VoteStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
