{
  "address": "0x9b044e96F738c8c16Cc9a3Bbb167514C6203CB08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_domainRegistries",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_domainRegistryLinks",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DomainRegistryNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IdentifierNotReset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBuildMetadata",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIdentifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NodeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDomainRegistryOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOrganizationController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOrganizationOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPackageController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPackageOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PackageAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReleaseIdentifierMustBeNumeric",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyIdentifiers",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VersionAlreadyPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VersionNotFullLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OrganizationClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "OrganizationControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OrganizationOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "domainOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOrganizationOwner",
          "type": "address"
        }
      ],
      "name": "OrganizationOwnershipClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "PackageControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "PackageOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "packageOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "packageController",
          "type": "address"
        }
      ],
      "name": "PackageRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedVersionPublisher",
          "type": "address"
        }
      ],
      "name": "TrustedVersionPublisherSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "versionBytes",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "buildMetadata",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "VersionPublished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOrganizationOwner",
          "type": "address"
        }
      ],
      "name": "claimOrganizationOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        }
      ],
      "name": "domainOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domainRegistryLinks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "latestPrereleaseLocation",
      "outputs": [
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "latestPrereleaseNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "nodeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "latestReleaseLocation",
      "outputs": [
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "latestReleaseNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "nodeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        }
      ],
      "name": "organization",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        }
      ],
      "name": "organizationController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "organizationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        }
      ],
      "name": "organizationExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "organizationIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        }
      ],
      "name": "organizationOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "package",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "packageController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        }
      ],
      "name": "packageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "packageExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "packageIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "packageOrganizationId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "packageOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "versionBytes",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "buildMetadata",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "publishVersion",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "nodeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "packageName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "packageOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "packageController",
          "type": "address"
        }
      ],
      "name": "registerPackage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "setOrganizationController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "setPackageController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setPackageOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "transferOrganizationControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "organizationId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOrganizationOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "transferPackageControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferPackageOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodeId",
          "type": "bytes32"
        }
      ],
      "name": "version",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "leaf",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "latestPrereleaseVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestReleaseVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "buildMetadata",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodeId",
          "type": "bytes32"
        }
      ],
      "name": "versionBuildMetadata",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "versionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodeId",
          "type": "bytes32"
        }
      ],
      "name": "versionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "versionIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodeId",
          "type": "bytes32"
        }
      ],
      "name": "versionLocation",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "versionMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "leaf",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "latestPrereleaseVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestReleaseVersion",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVersionRegistry.VersionNodeMetadata",
          "name": "nodeMetadata",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x311b3765814ee5c7b0de87874b7a43a2b3701347a52c46d78eec108126933031",
  "receipt": {
    "to": null,
    "from": "0xE9FFd2d4c1e3eAF13f6e17DfDCD615a66f357dF4",
    "contractAddress": "0x9b044e96F738c8c16Cc9a3Bbb167514C6203CB08",
    "transactionIndex": 11,
    "gasUsed": "3887447",
    "logsBloom": "0x
    "blockHash": "0xc79fa72156b3915df6ac2667e071a61c537d106e3c7d3d4594499948f01cb860",
    "transactionHash": "0x311b3765814ee5c7b0de87874b7a43a2b3701347a52c46d78eec108126933031",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 9739604,
        "transactionHash": "0x311b3765814ee5c7b0de87874b7a43a2b3701347a52c46d78eec108126933031",
        "address": "0x9b044e96F738c8c16Cc9a3Bbb167514C6203CB08",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9ffd2d4c1e3eaf13f6e17dfdcd615a66f357df4"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc79fa72156b3915df6ac2667e071a61c537d106e3c7d3d4594499948f01cb860"
      }
    ],
    "blockNumber": 9739604,
    "cumulativeGasUsed": "7010277",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x656e730000000000000000000000000000000000000000000000000000000000"
    ],
    [
      "0x86Fc08B4e06d99D70Ff98b5592E4A3bC2d8e8128"
    ]
  ],
  "solcInputHash": "b88e060abe69238041f6e18b2c73297e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_domainRegistries\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_domainRegistryLinks\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DomainRegistryNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdentifierNotReset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBuildMetadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIdentifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NodeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDomainRegistryOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOrganizationController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOrganizationOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPackageController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPackageOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PackageAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReleaseIdentifierMustBeNumeric\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyIdentifiers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionAlreadyPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionNotFullLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OrganizationClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"OrganizationControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OrganizationOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"domainOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOrganizationOwner\",\"type\":\"address\"}],\"name\":\"OrganizationOwnershipClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"PackageControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PackageOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"packageOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"packageController\",\"type\":\"address\"}],\"name\":\"PackageRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedVersionPublisher\",\"type\":\"address\"}],\"name\":\"TrustedVersionPublisherSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"versionBytes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"buildMetadata\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"VersionPublished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOrganizationOwner\",\"type\":\"address\"}],\"name\":\"claimOrganizationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"}],\"name\":\"domainOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domainRegistryLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"latestPrereleaseLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"latestPrereleaseNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"latestReleaseLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"latestReleaseNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"}],\"name\":\"organization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"}],\"name\":\"organizationController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"organizationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"}],\"name\":\"organizationExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"organizationIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"}],\"name\":\"organizationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"package\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"packageController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"}],\"name\":\"packageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"packageExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"packageIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"packageOrganizationId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"packageOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"versionBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"buildMetadata\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"publishVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"packageName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"packageOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"packageController\",\"type\":\"address\"}],\"name\":\"registerPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setOrganizationController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setPackageController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setPackageOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"transferOrganizationControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOrganizationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"transferPackageControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPackageOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeId\",\"type\":\"bytes32\"}],\"name\":\"version\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"leaf\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"latestPrereleaseVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestReleaseVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"buildMetadata\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeId\",\"type\":\"bytes32\"}],\"name\":\"versionBuildMetadata\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"versionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeId\",\"type\":\"bytes32\"}],\"name\":\"versionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"versionIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeId\",\"type\":\"bytes32\"}],\"name\":\"versionLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"versionMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"leaf\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"latestPrereleaseVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestReleaseVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct IVersionRegistry.VersionNodeMetadata\",\"name\":\"nodeMetadata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"publishVersion(bytes32,bytes,bytes32,string)\":{\"details\":\"Publish a new version of a package.\",\"params\":{\"buildMetadata\":\"Metadata for the build of the version.\",\"location\":\"The IPFS hash where the contents of the version are stored.\",\"packageId\":\"The ID of a package.\",\"versionBytes\":\"The encoded bytes of a version string. The first byte is the number of identifiers (3-15). The rest of the bytes are base64 encoded identifiers. Identifiers are grouped two by two. Two identifiers per 32 bytes. 14 bits = empty 1 bit = isLatestPrereleaseAlphanumeric 120 bits = latestPrereleaseVersion; 1 bit = isLatestReleaseAlphanumeric 120 bits = latestReleaseVersion;\"},\"returns\":{\"nodeId\":\"ID of the published version.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version(bytes32)\":{\"details\":\"Get the details of a version node.\",\"params\":{\"nodeId\":\"The ID of a version.\"},\"returns\":{\"buildMetadata\":\"Metadata for the build of the version.\",\"exists\":\"Boolean indicating whether or not the node exists.\",\"latestPrereleaseVersion\":\"The identifier of the latest prerelease version.\",\"latestReleaseVersion\":\"The identifier of the latest release version.\",\"leaf\":\"Boolean indicating whether the node is a leaf node (does not contain children).\",\"level\":\"The level of the identifier for the node.\",\"location\":\"The IPFS hash where the contents of the version are stored.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/registry/v1/PolywrapRegistryV1.sol\":\"PolywrapRegistryV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"contracts/versioning/domain-registries/interfaces/IDomainRegistryLinkV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IDomainRegistryLinkV1 {\\n  function getDomainOwner(bytes32 domainRegistryNode)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0x7778a10558164bc975a78ba6effada36677bd4929d88d526c7f7b39f10e913db\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/OrganizationOwnershipManagerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IOrganizationOwnershipManager.sol\\\";\\nimport \\\"../../domain-registries/interfaces/IDomainRegistryLinkV1.sol\\\";\\nimport \\\"./VersionResolverV1.sol\\\";\\n\\nerror OnlyDomainRegistryOwner();\\nerror DomainRegistryNotSupported();\\n\\nabstract contract OrganizationOwnershipManagerV1 is VersionResolverV1, IOrganizationOwnershipManager {\\n  mapping(bytes32 => address) public domainRegistryLinks;\\n\\n  constructor(\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) VersionResolverV1() {\\n    require(\\n      _domainRegistries.length == _domainRegistryLinks.length,\\n      \\\"Registry arrays must have the same length\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _domainRegistries.length; i++) {\\n      domainRegistryLinks[_domainRegistries[i]] = _domainRegistryLinks[i];\\n    }\\n  }\\n\\n\\tfunction claimOrganizationOwnership(bytes32 domainRegistry, bytes32 domainRegistryNode, address newOrganizationOwner) public virtual override {\\n    address domainOwnerAddress = domainOwner(domainRegistry, domainRegistryNode);\\n\\n    if(msg.sender != domainOwnerAddress) {\\n      revert OnlyDomainRegistryOwner();\\n    }\\n\\n    bytes32 organizationId = keccak256(abi.encodePacked(domainRegistry, domainRegistryNode));\\n\\n    claimOrganization(\\n      organizationId,\\n      newOrganizationOwner\\n    );\\n\\n\\t\\temit OrganizationOwnershipClaimed(domainRegistry, domainRegistryNode, domainOwnerAddress, newOrganizationOwner);\\n\\t}\\n\\t\\n\\tfunction domainOwner(bytes32 domainRegistry, bytes32 domainRegistryNode) public virtual override view returns (address) {\\n\\t\\taddress domainRegistryLinkAddress = domainRegistryLinks[domainRegistry];\\n\\n    if(domainRegistryLinkAddress == address(0)) {\\n\\t\\t\\trevert DomainRegistryNotSupported();\\n\\t\\t}\\n\\n    return\\n      IDomainRegistryLinkV1(domainRegistryLinkAddress).getDomainOwner(\\n        domainRegistryNode\\n      );\\n\\t}\\n}\",\"keccak256\":\"0xb831ed5ab6f786c236b20e789a3881c591fa91f8120fc62d66c466e18831e00c\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/PackageRegistryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IPackageRegistry.sol\\\";\\n\\nerror OnlyOrganizationOwner();\\nerror OnlyOrganizationController();\\nerror PackageAlreadyExists();\\nerror OnlyPackageOwner();\\nerror OnlyPackageController();\\n\\nabstract contract PackageRegistryV1 is OwnableUpgradeable, IPackageRegistry {\\n  \\n  struct Organization {\\n    bool exists;\\n    address owner;\\n    address controller;\\n\\t\\tbytes32[] packageList;\\n  }\\n\\n  struct Package {\\n    bool exists;\\n    address owner;\\n    address controller;\\n    bytes32 organizationId;\\n  }\\n\\n  mapping(bytes32 => Organization) organizations;\\n  bytes32[] organizationList;\\n  mapping(bytes32 => Package) packages;\\n\\n  function claimOrganization(bytes32 organizationId, address owner) internal {\\n\\t\\tif(!organizations[organizationId].exists) {\\n\\t\\t\\torganizationList.push(organizationId);\\n\\n\\t\\t\\torganizations[organizationId].exists = true;\\n\\t\\t}\\n\\n\\t\\taddress previousOwner = organizations[organizationId].owner;\\n    organizations[organizationId].owner = owner;\\n\\n    emit OrganizationOwnerChanged(\\n      organizationId, \\n\\t\\t\\tpreviousOwner,\\n      owner\\n    );\\n\\t}\\n\\n  function transferOrganizationOwnership(bytes32 organizationId, address newOwner) \\n    public virtual override onlyOrganizationOwner(organizationId) {\\n\\n\\t\\taddress previousOwner = organizations[organizationId].owner;\\n    organizations[organizationId].owner = newOwner;\\n\\n    emit OrganizationOwnerChanged(\\n      organizationId,\\n\\t\\t\\tpreviousOwner, \\n      newOwner\\n    );\\n\\t}\\n\\t\\n\\tfunction setOrganizationController(bytes32 organizationId, address newController) \\n    public virtual override onlyOrganizationOwner(organizationId) {\\n\\n\\t\\taddress previousController = organizations[organizationId].controller;\\n    organizations[organizationId].controller = newController;\\n\\n    emit OrganizationControllerChanged(\\n      organizationId, \\n\\t\\t\\tpreviousController,\\n      newController\\n    );\\n\\t}\\n\\t\\n\\tfunction transferOrganizationControl(bytes32 organizationId, address newController) \\n    public virtual override onlyOrganizationController(organizationId) {\\n\\n\\t\\taddress previousController = organizations[organizationId].controller;\\n    organizations[organizationId].controller = newController;\\n\\n    emit OrganizationControllerChanged(\\n      organizationId, \\n\\t\\t\\tpreviousController,\\n      newController\\n    );\\n\\t}\\n\\n\\tfunction registerPackage(bytes32 organizationId, bytes32 packageName, address packageOwner, address packageController) \\n    public virtual override onlyOrganizationController(organizationId) {\\n\\n\\t\\tbytes32 packageId = keccak256(abi.encodePacked(organizationId, packageName));\\n\\t\\t\\n\\t\\tif(packages[packageId].exists) {\\n\\t\\t\\trevert PackageAlreadyExists();\\n\\t\\t}\\n\\t\\t\\n\\t\\tpackages[packageId].exists = true;\\n\\t\\tpackages[packageId].organizationId = organizationId;\\n\\t\\torganizations[organizationId].packageList.push(packageId);\\n\\n\\t\\temit PackageRegistered(\\n\\t\\t\\torganizationId, \\n\\t\\t\\tpackageId, \\n\\t\\t\\tpackageName, \\n\\t\\t\\tpackageOwner,\\n      packageController\\n\\t\\t);\\n\\n\\t\\t_setPackageOwner(packageId, packageOwner);\\n    _setPackageController(packageId, packageController);\\n\\t}\\n\\n\\tfunction setPackageOwner(\\n    bytes32 packageId,\\n    address newOwner\\n  ) public virtual override onlyOrganizationController(packages[packageId].organizationId) {\\n    _setPackageOwner(packageId, newOwner);\\n  }\\n\\n  function transferPackageOwnership(\\n    bytes32 packageId,\\n    address newOwner\\n  ) public virtual override onlyPackageOwner(packageId) {\\n    _setPackageOwner(packageId, newOwner);\\n  }\\n\\n  function _setPackageOwner(\\n    bytes32 packageId,\\n    address newOwner\\n  ) private {\\n    address previousOwner = packages[packageId].owner;\\n    packages[packageId].owner = newOwner;\\n\\n    emit PackageOwnerChanged(\\n      packageId, \\n      previousOwner,\\n      newOwner\\n    );\\n  }\\n\\n  function setPackageController(\\n    bytes32 packageId,\\n    address newController\\n  ) public virtual override onlyPackageOwner(packageId) {\\n    _setPackageController(packageId, newController);\\n  }\\n\\n  function _setPackageController(\\n    bytes32 packageId,\\n    address newController\\n  ) private {\\n    address previousController = packages[packageId].controller;\\n    packages[packageId].controller = newController;\\n\\n    emit PackageControllerChanged(\\n      packageId,\\n      previousController, \\n      newController\\n    );\\n  }\\n\\n  function transferPackageControl(\\n    bytes32 packageId,\\n    address newController\\n  ) public virtual override onlyPackageController(packageId) {\\n    _setPackageController(packageId, newController);\\n  }\\n\\n\\tfunction organizationOwner(bytes32 organizationId) public virtual override view returns (address) {\\n    return organizations[organizationId].owner;\\n\\t}\\n\\t\\n\\tfunction organizationController(bytes32 organizationId) public virtual override view returns (address) {\\n    return organizations[organizationId].controller;\\n\\t}\\n\\t\\n\\tfunction organizationExists(bytes32 organizationId) public virtual override view returns (bool) {\\n    return organizations[organizationId].exists;\\n\\t}\\n\\n\\tfunction organization(bytes32 organizationId) public virtual override view returns (bool exists, address owner, address controller) {\\n    Organization memory organizationInfo = organizations[organizationId];\\n\\n\\t\\treturn (\\n      organizationInfo.exists,\\n\\t\\t\\torganizationInfo.owner,\\n      organizationInfo.controller\\n    );\\n\\t}\\n\\t\\n\\tfunction organizationIds(uint256 start, uint256 count) public virtual override view returns (bytes32[] memory) {\\n\\t\\tuint256 organizationListLength = organizationList.length;\\n\\t\\t\\n\\t\\tuint256 len = start + count > organizationListLength \\n\\t\\t\\t? organizationListLength - start \\n\\t\\t\\t: count;\\n\\n\\t\\tbytes32[] memory organizationArray = new bytes32[](len);\\n\\n\\t\\tfor(uint256 i = 0; i < len; i++) {\\n\\t\\t\\torganizationArray[i] = organizationList[start + i];\\n\\t\\t}\\n\\n\\t\\treturn organizationArray;\\n\\t}\\n\\t\\n\\tfunction organizationCount() public virtual view returns (uint256) {\\n    return organizationList.length;\\n\\t}\\n\\t\\n\\tfunction packageIds(bytes32 organizationId, uint256 start, uint256 count) public virtual override view returns (bytes32[] memory) {\\n\\t\\tbytes32[] memory packageList = organizations[organizationId].packageList;\\n\\n\\t\\tuint256 len = start + count > packageList.length \\n\\t\\t\\t? packageList.length - start \\n\\t\\t\\t: count;\\n\\n\\t\\tbytes32[] memory packageArray = new bytes32[](len);\\n\\n\\t\\tfor(uint256 i = 0; i < len; i++) {\\n\\t\\t\\tpackageArray[i] = packageList[start + i];\\n\\t\\t}\\n\\n\\t\\treturn packageArray;\\n\\t}\\n\\t\\n\\tfunction packageCount(bytes32 organizationId) public virtual override view returns (uint256) {\\n    return organizations[organizationId].packageList.length;\\n\\t}\\n\\n  function packageExists(bytes32 packageId) public virtual override view returns (bool) {\\n    return packages[packageId].exists;\\n  }\\n\\n  function packageOwner(bytes32 packageId) public virtual override view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n\\n  function packageController(bytes32 packageId) public virtual override view returns (address) {\\n    return packages[packageId].controller;\\n  }\\n\\n  function packageOrganizationId(bytes32 packageId) public virtual override view returns (bytes32) {\\n    return packages[packageId].organizationId;\\n  }\\n\\n  function package(bytes32 packageId) \\n    public virtual override view returns (bool exists, address owner, address controller, bytes32 organizationId) {\\n    return (\\n      packages[packageId].exists,\\n      packages[packageId].owner,\\n      packages[packageId].controller,\\n      packages[packageId].organizationId\\n    );\\n  }\\n\\n  modifier onlyOrganizationOwner(bytes32 organizationId) {\\n    if (msg.sender != organizations[organizationId].owner) {\\n      revert OnlyOrganizationOwner();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyOrganizationController(bytes32 organizationId) {\\n    if (msg.sender != organizations[organizationId].controller) {\\n      revert OnlyOrganizationController();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyPackageOwner(bytes32 packageId) {\\n    if (msg.sender != packages[packageId].owner) {\\n      revert OnlyPackageOwner();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyPackageController(bytes32 packageId) {\\n    if (msg.sender != packages[packageId].controller) {\\n      revert OnlyPackageController();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xe653ce5aae9b6cd0278877d7f31c4f6099e2deba76c9c7783acc67c3d75ac407\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/PolywrapRegistryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./OrganizationOwnershipManagerV1.sol\\\";\\n\\ncontract PolywrapRegistryV1 is OrganizationOwnershipManagerV1 {\\n  constructor(\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) OrganizationOwnershipManagerV1(_domainRegistries, _domainRegistryLinks) {\\n\\n  }\\n}\\n\",\"keccak256\":\"0xe8fc81885c67ff79c8d5d9067181e11af37c67cf5962b74d0afdf5e837e5ccaf\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/VersionRegistryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IVersionRegistry.sol\\\";\\nimport \\\"./PackageRegistryV1.sol\\\";\\n\\nerror OnlyTrustedVersionPublisher();\\n//Version requires at least major, minor and patch identifiers specified\\nerror VersionNotFullLength();\\n//Major, minor and patch are release identifiers and they must be numeric (not alphanumeric)\\nerror ReleaseIdentifierMustBeNumeric();\\nerror VersionAlreadyPublished();\\n//Max count of identifiers is 16\\nerror TooManyIdentifiers();\\n//Identifiers must satisfy [0-9A-Za-z-]+\\nerror InvalidIdentifier();\\n//Build metadata must satisfy [0-9A-Za-z-]*\\nerror InvalidBuildMetadata();\\n//When incrementing the major number, the minor and patch numbers must be reset to 0\\n//When incrementing the minor number, the patch number must be reset to 0\\n//Does not apply to development versions (0.x.x)\\nerror IdentifierNotReset();\\n\\nabstract contract VersionRegistryV1 is PackageRegistryV1, IVersionRegistry {\\n  struct VersionNode {\\n    /*\\n    Contains:\\n      1 bit = exists;\\n      1 bit = leaf;\\n      6 bits = level;\\n      6 bits = empty\\n      1 bit = isLatestPrereleaseAlphanumeric\\n      120 bits = latestPrereleaseVersion;\\n      1 bit = isLatestReleaseAlphanumeric\\n      120 bits = latestReleaseVersion;\\n    */\\n    uint256 versionMetadata;\\n    bytes32 buildMetadata;\\n    string location;\\n  }\\n\\n  mapping(bytes32 => VersionNode) versionNodes;\\n  mapping(bytes32 => bytes32[]) packageVersionLists;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  /**\\n   * @dev Publish a new version of a package.\\n   * @param packageId The ID of a package.\\n   * @param versionBytes The encoded bytes of a version string.\\n   * The first byte is the number of identifiers (3-15). The rest of the bytes are base64 encoded identifiers.\\n   * Identifiers are grouped two by two. Two identifiers per 32 bytes.\\n   * 14 bits = empty\\n   * 1 bit = isLatestPrereleaseAlphanumeric\\n   * 120 bits = latestPrereleaseVersion;\\n   * 1 bit = isLatestReleaseAlphanumeric\\n   * 120 bits = latestReleaseVersion;\\n   * @param buildMetadata Metadata for the build of the version.\\n   * @param location The IPFS hash where the contents of the version are stored.\\n   * @return nodeId ID of the published version.\\n   */\\n  function publishVersion(\\n    bytes32 packageId,\\n    bytes memory versionBytes,\\n    bytes32 buildMetadata,\\n    string memory location\\n  ) public returns (bytes32 nodeId) {\\n    if(msg.sender != packages[packageId].controller) {\\n\\t\\t\\trevert OnlyPackageController();\\n\\t\\t}\\n\\n    //Tracking whether changes were made to the node, so that we can batch them\\n    bool hasMadeChange = false;\\n\\n    VersionNodeMetadata memory nodeMetadata = versionMetadata(packageId);\\n    \\n    if(!nodeMetadata.exists) {\\n      hasMadeChange = true;\\n      nodeMetadata.exists = true;\\n    }\\n\\n    //First byte of the version array is the number of identifiers\\n    //level is used for numbering nodes/identifiers from (0 - packageNode, 1 - major node/identifier, etc)\\n    //level is an 6 bit number (although stored in uint8) which has a max value of 65\\n    //0x0f = 65\\n    uint8 identifierCnt = uint8(versionBytes[0]);\\n\\n    if(identifierCnt > 65) {\\n      revert TooManyIdentifiers();\\n    }\\n\\n    //A proper version requires at least 3 identifiers (major, minor, patch)\\n    if(identifierCnt < 3) {\\n      revert VersionNotFullLength();\\n    }\\n\\n    nodeId = packageId;\\n    bool lastNodeCreated = false;\\n    {\\n      uint256 identifier;\\n      uint256 secondIdentifier;\\n      uint8 levelCnt;\\n      //If a version has more than 3 identifiers then it's a prerelease\\n      bool isPrerelease = identifierCnt > 3;\\n      bool isDevelopmentVersion = false;\\n      uint256 pointer;\\n      assembly {\\n        //First 32 bytes stores the length of the array, the next byte is the number of identifiers\\n        pointer := add(versionBytes, 33)\\n      }\\n\\n      while(levelCnt < identifierCnt) {\\n\\n        levelCnt += 1;\\n\\n        if(levelCnt % 2 == 1) {\\n          assembly {\\n            identifier := mload(pointer)\\n            pointer := add(pointer, 32)\\n          }\\n\\n          //Identifiers are 121 bits long \\n          //They are store two by two in the versionBytes array (32 bytes for two identifiers)\\n          //The first 14 bits are empty\\n          //The next 242 bits are the two identifiers (121 bits per identifier)\\n          //The first bit of the 121 bits used for the identifier is a flag indicating if the identifier is alphanumeric\\n          //The next 120 bits is the numeric or alphanumeric value of the identifier\\n          secondIdentifier = identifier & 0x01ffffffffffffffffffffffffffffff;\\n          identifier = identifier >> 121 & 0x01ffffffffffffffffffffffffffffff;\\n        } else {\\n          identifier = secondIdentifier;\\n          secondIdentifier = 0x0;\\n        }\\n\\n        //The byte at the 16th position (0 indexed) is the alphanumeric flag\\n        if(levelCnt <= 3 && bytes32(identifier)[16] != 0) {\\n          revert ReleaseIdentifierMustBeNumeric();\\n        }\\n\\n        //If a version starts with 0 (0.x.x) then it's a development version\\n        if(levelCnt == 1 && identifier == 0) {\\n          isDevelopmentVersion = true;\\n        }\\n\\n        //Numeric identifier are always lower (lower precedence) than alphanumeric ones\\n        //Alphanumeric identifiers are ordered lexically in ASCII order\\n        if (nodeMetadata.latestPrereleaseVersion < identifier) {\\n          nodeMetadata.latestPrereleaseVersion = identifier;\\n          hasMadeChange = true;\\n        }\\n\\n        if (!isPrerelease && nodeMetadata.latestReleaseVersion < identifier) {\\n          nodeMetadata.latestReleaseVersion = identifier;\\n          hasMadeChange = true;\\n        }\\n\\n        if(nodeMetadata.leaf) {\\n          nodeMetadata.leaf = false;\\n          hasMadeChange = true;\\n        }\\n\\n        if(hasMadeChange) {\\n          setVersionMetadata(nodeId, nodeMetadata);\\n\\n          hasMadeChange = false;\\n        }\\n\\n        nodeId = keccak256(abi.encodePacked(nodeId, identifier));\\n        nodeMetadata = versionMetadata(nodeId);\\n\\n        //If the node doesn't exist then create it\\n        if(!nodeMetadata.exists) {\\n          nodeMetadata.exists = true;\\n          hasMadeChange = true;\\n            \\n          //Check whether the identifier matches [0-9A-Za-z-]+\\n          if(!isSemverCompliantIdentifier(identifier)) {\\n            revert InvalidIdentifier();\\n          }\\n\\n          nodeMetadata.level = levelCnt;\\n\\n          //Check whether the identifier needs to be reset to 0 (when incrementing major or minor numbers)\\n          if(\\n            !isDevelopmentVersion &&\\n            (levelCnt == 2 || levelCnt == 3) && \\n            lastNodeCreated && \\n            identifier != 0\\n          ) {\\n            revert IdentifierNotReset();\\n          }\\n\\n          lastNodeCreated = true;\\n        } else {\\n          lastNodeCreated = false;\\n        }\\n      }\\n    }\\n\\n    //If there's already a location specified, it means that the version is already published\\n    if(bytes(versionNodes[nodeId].location).length != 0) {\\n      revert VersionAlreadyPublished();\\n    }\\n\\n    versionNodes[nodeId].location = location;\\n    packageVersionLists[packageId].push(nodeId);\\n\\n    if(buildMetadata != 0x0) {\\n      //Unlike identifiers, build metadata is always alphanumeric, so it doesn't have the first byte to specify if it's numeric or alphanumeric\\n      if(!isSemverCompliantMetadataString(buildMetadata)) {\\n        revert InvalidBuildMetadata();\\n      }\\n      versionNodes[nodeId].buildMetadata = buildMetadata;\\n    }\\n\\n    //If a new node was created, then it doesn't have children and is a leaf node\\n    if(lastNodeCreated) {\\n      nodeMetadata.leaf = true;\\n    }\\n\\n    setVersionMetadata(nodeId, nodeMetadata);\\n\\n    emit VersionPublished(\\n      packageId,\\n      nodeId,\\n      versionBytes,\\n      buildMetadata,\\n      location\\n    );\\n\\n    return nodeId;\\n  }\\n\\n  function isSemverCompliantIdentifier(uint256 identifier) private pure returns (bool) {\\n    //The identifier is numeric\\n    if(bytes32(identifier)[16] == 0) {\\n      return true;\\n    }\\n    \\n    //The identifier is alphanumeric from index 1 to end\\n    return isSemverCompliantIdentifierString(identifier);\\n  }\\n\\n  function isSemverCompliantIdentifierString(uint256 identifier) private pure returns (bool) {\\n    //Track whether a character is found or is empty (null)\\n    //If it's empty then the rest of the string should be empty too\\n    bool foundCharacter = false;\\n    //20 characters, 6 bits per character\\n    uint256 bitOffset = 0;\\n\\n    //Take only the last 120 bits which represent 20 characters with 6 bytes each\\n    identifier = identifier & 0xffffffffffffffffffffffffffffff;\\n\\n    //20 characters, 6 bits per character\\n    while(bitOffset < 120) {\\n      //0x3f = 111111\\n      uint256 character = (identifier >> bitOffset) & 0x3f;\\n      bitOffset += 6;\\n\\n      //If a character is 0 then the rest of the identifier should be 0\\n      if(character != 0) {\\n        foundCharacter = true;\\n        continue;\\n      }\\n\\n      if(foundCharacter && character == 0) {\\n        return false;\\n      }\\n    }\\n\\n    return foundCharacter;\\n  }\\n\\n  //A SemVer compliant string is an ASCII encoded string that satisfies the regex [0-9A-Za-z-]+\\n  //Returns true if the string is 0x0 which means empty\\n  function isSemverCompliantMetadataString(bytes32 identifier) private pure returns (bool) {\\n    bool foundZero = false;\\n    for(uint256 i = 0; i < 32; i++) {\\n      //If a character is 0x0 then the rest of the identifier should be 0x0\\n      if(identifier[i] == 0) {\\n        foundZero = true;\\n        continue;\\n      }\\n\\n      if(foundZero && identifier[i] != 0) {\\n        return false;\\n      }\\n\\n      if(!(\\n          //0-9\\n          (identifier[i] >=0x30 && identifier[i] <= 0x39) || \\n          //A-Z\\n          (identifier[i] >=0x41 && identifier[i] <= 0x5a) || \\n          //a-z\\n          (identifier[i] >=0x61 && identifier[i] <= 0x7a) || \\n          //Hyphen(-)\\n          identifier[i] == 0x2d\\n        )){\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  function setVersionMetadata(\\n    bytes32 nodeId,\\n    VersionNodeMetadata memory nodeMetadata\\n  ) private {\\n\\n    uint8 firstByte = nodeMetadata.level\\n      | ((nodeMetadata.leaf ? 1 : 0) << 6) \\n      | ((nodeMetadata.exists ? 1 : 0) << 7);\\n    \\n    uint256 metadata = uint256(firstByte) << 248\\n      | nodeMetadata.latestReleaseVersion\\n      | (nodeMetadata.latestPrereleaseVersion << 121); \\n\\n    versionNodes[nodeId].versionMetadata = metadata;\\n  }\\n  \\n  function versionMetadata(bytes32 versionNodeId) public virtual override view returns (\\n    VersionNodeMetadata memory nodeMetadata\\n  ) {\\n    /*\\n    Contains:\\n      1 bit = exists;\\n      1 bit = leaf;\\n      6 bits = level;\\n      6 bits = empty\\n      1 bit = isLatestPrereleaseAlphanumeric\\n      120 bits = latestPrereleaseVersion;\\n      1 bit = isLatestReleaseAlphanumeric\\n      120 bits = latestReleaseVersion;\\n    */\\n    uint256 metadata = versionNodes[versionNodeId].versionMetadata;\\n\\n    //First byte of metadata stores the exists flag (1 bit), leaf flag (1 bit) and level number (6 bits)\\n    uint8 firstByte =  uint8(metadata >> 248);\\n\\n    //0x80 = 10000000 in binary\\n    nodeMetadata.exists = firstByte & 0x80 == 0x80\\n      ? true\\n      : false; \\n\\n    if(!nodeMetadata.exists) {\\n      return nodeMetadata;\\n    }\\n\\n    //0x3f = 00111111 in binary\\n    nodeMetadata.level = firstByte & 0x3f;\\n    //0x10 = 01000000 in binary\\n    nodeMetadata.leaf = firstByte & 0x40 == 0x40\\n      ? true\\n      : false;\\n\\n    nodeMetadata.latestPrereleaseVersion = (metadata >> 121) & 0x01ffffffffffffffffffffffffffffff; \\n    nodeMetadata.latestReleaseVersion = metadata & 0x01ffffffffffffffffffffffffffffff; \\n  }\\n\\n  function versionExists(bytes32 nodeId) public virtual override view returns (bool) {\\n    return versionMetadata(nodeId).exists;\\n  }\\n\\n  function versionLocation(bytes32 nodeId) public virtual override view returns (string memory) {\\n    return versionNodes[nodeId].location;\\n  }\\n\\n  function versionBuildMetadata(bytes32 nodeId) public virtual override view returns (bytes32) {\\n    return versionNodes[nodeId].buildMetadata;\\n  }\\n\\n  /**\\n   * @dev Get the details of a version node.\\n   * @param nodeId The ID of a version.\\n   * @return exists Boolean indicating whether or not the node exists.\\n   * @return leaf Boolean indicating whether the node is a leaf node (does not contain children).\\n   * @return level The level of the identifier for the node.\\n   * @return latestPrereleaseVersion The identifier of the latest prerelease version.\\n   * @return latestReleaseVersion The identifier of the latest release version.\\n   * @return buildMetadata Metadata for the build of the version.\\n   * @return location The IPFS hash where the contents of the version are stored.\\n   */\\n  function version(bytes32 nodeId) public view returns (\\n    bool exists,\\n    bool leaf,\\n    uint8 level,\\n    uint256 latestPrereleaseVersion,\\n    uint256 latestReleaseVersion,\\n    bytes32 buildMetadata,\\n    string memory location\\n  ) {\\n    VersionNodeMetadata memory nodeMetadata = versionMetadata(nodeId);\\n\\n    return (\\n      nodeMetadata.exists, \\n      nodeMetadata.leaf,\\n      nodeMetadata.level, \\n      nodeMetadata.latestPrereleaseVersion, \\n      nodeMetadata.latestReleaseVersion, \\n      versionBuildMetadata(nodeId),\\n      versionLocation(nodeId)\\n    );\\n  }\\n\\n  function versionIds(bytes32 packageId, uint256 start, uint256 count) public virtual override view returns (bytes32[] memory) {\\n    bytes32[] memory versionList = packageVersionLists[packageId];\\n\\n\\t\\tuint256 versionListLength = versionList.length;\\n\\t\\t\\n\\t\\tuint256 len = start + count > versionListLength\\n\\t\\t\\t? versionListLength - start \\n\\t\\t\\t: count;\\n\\n\\t\\tbytes32[] memory versionArray = new bytes32[](len);\\n\\n\\t\\tfor(uint256 i = 0; i < len; i++) {\\n\\t\\t\\tversionArray[i] = versionList[start + i];\\n\\t\\t}\\n\\n\\t\\treturn versionArray;\\n\\t}\\n\\n\\tfunction versionCount(bytes32 packageId) public virtual override view returns (uint256) {\\n    return packageVersionLists[packageId].length;\\n  }\\n}\\n\",\"keccak256\":\"0x8ad737c0fd862663bd8351e47907befa2b1da146293486585163ff44afb39a5d\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/VersionResolverV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IVersionRegistry.sol\\\";\\nimport \\\"./interfaces/IVersionResolver.sol\\\";\\nimport \\\"./VersionRegistryV1.sol\\\";\\n\\nerror NodeNotFound();\\n\\nabstract contract VersionResolverV1 is VersionRegistryV1, IVersionResolver {\\n\\n  function latestReleaseNode(bytes32 versionNodeId) public virtual override view returns (bytes32 nodeId) {\\n    (bool exists,, uint8 level,, uint256 latestReleaseVersion,, string memory location) = version(versionNodeId);\\n\\n    if(!exists) {\\n      revert NodeNotFound();\\n    }\\n\\n    //level == 3 is true for release versions versions(patch nodes)\\n    //eg. 1.0.1\\n    if (level == 3) {\\n      if(bytes(location).length == 0) {\\n        revert NodeNotFound();\\n      }\\n\\n      return versionNodeId;\\n    }\\n\\n    bytes32 latestNodeId = keccak256(\\n      abi.encodePacked(versionNodeId, latestReleaseVersion)\\n    );\\n\\n    return latestReleaseNode(latestNodeId);\\n  }\\n\\n  function latestPrereleaseNode(bytes32 versionNodeId) public virtual override view returns (bytes32 nodeId) {\\n    (bool exists, bool leaf, uint8 level, uint256 latestPrereleaseVersion,,, string memory location) = version(versionNodeId);\\n \\n    if(!exists) {\\n      revert NodeNotFound();\\n    }\\n\\n    //level == 3 && bytes(location).length != 0) is true if it's a patch version (eg. 1.0.0) and it has a location\\n    //This follows SemVer rules where a prerelease version has lower precedence than a release(patch) version\\n    //eg. 1.0.0-alpha < 1.0.0\\n    if (leaf || (level == 3 && bytes(location).length != 0)) {\\n      return versionNodeId;\\n    }\\n\\n    bytes32 latestNodeId = keccak256(\\n      abi.encodePacked(versionNodeId, latestPrereleaseVersion)\\n    );\\n\\n    return latestPrereleaseNode(latestNodeId);\\n  }\\n\\n  function latestReleaseLocation(bytes32 versionNodeId)\\n    public virtual override\\n    view\\n    returns (string memory location)\\n  {\\n    bytes32 concreteVersionId = latestReleaseNode(versionNodeId);\\n    (,,,,,, location) = version(concreteVersionId);\\n\\n    return location;\\n  }\\n\\n  function latestPrereleaseLocation(bytes32 versionNodeId)\\n    public virtual override\\n    view\\n    returns (string memory location)\\n  {\\n    bytes32 concreteVersionId = latestPrereleaseNode(versionNodeId);\\n    (,,,,,, location) = version(concreteVersionId);\\n\\n    return location;\\n  }\\n}\\n\",\"keccak256\":\"0xd7e10db0b12ce579aee7d73339800f6fb10fd5d812b6173ffb3a0439c1b99704\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/interfaces/IOrganizationOwnershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IOrganizationOwnershipManager {\\n  event OrganizationOwnershipClaimed(bytes32 indexed domainRegistry, bytes32 indexed domainRegistryNode, address domainOwner, address newOrganizationOwner);\\n\\n\\tfunction claimOrganizationOwnership(bytes32 domainRegistry, bytes32 domainRegistryNode, address newOrganizationOwner) external;\\n\\tfunction domainOwner(bytes32 domainRegistry, bytes32 domainRegistryNode) external view returns (address);\\n}\",\"keccak256\":\"0x7a8c28372e172617a6c9517c748c98e9b5bf4db7ab04a42b5ffa22610e658140\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/interfaces/IPackageRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IPackageRegistry {\\n\\tevent OrganizationClaimed(bytes32 indexed organizationId, address indexed owner);\\n\\tevent OrganizationOwnerChanged(bytes32 indexed organizationId, address indexed previousOwner, address indexed newOwner);\\n\\tevent OrganizationControllerChanged(bytes32 indexed organizationId, address indexed previousController, address indexed newController);\\n\\tevent PackageRegistered(bytes32 indexed organizationId, bytes32 indexed\\tpackageId, bytes32 indexed packageName,\\taddress packageOwner, address packageController);\\n\\tevent PackageOwnerChanged(bytes32 packageId, address indexed previousOwner, address indexed newOwner);\\n\\tevent PackageControllerChanged(bytes32 packageId, address indexed previousController, address indexed newController);\\n\\n\\tfunction transferOrganizationOwnership(bytes32 organizationId, address newOwner) external;\\n\\tfunction setOrganizationController(bytes32 organizationId, address newController) external;\\n\\tfunction transferOrganizationControl(bytes32 organizationId, address newController) external;\\n\\tfunction registerPackage(bytes32 organizationId, bytes32 packageName, address packageOwner, address packageController) external;\\n\\tfunction setPackageOwner(bytes32 packageId, address newOwner) external;\\n\\tfunction transferPackageOwnership(bytes32 packageId, address newOwner) external;\\n\\tfunction setPackageController(bytes32 packageId, address newController) external;\\n\\tfunction transferPackageControl(bytes32 packageId, address newController) external ;\\n  function organizationOwner(bytes32 organizationId) external view returns (address);\\n\\tfunction organizationController(bytes32 organizationId) external view returns (address);\\n\\tfunction organizationExists(bytes32 organizationId) external view returns (bool);\\n\\tfunction organization(bytes32 organizationId) external view returns (bool exists, address owner, address controller);\\n\\tfunction organizationIds(uint256 start, uint256 count) external view returns (bytes32[] memory);\\n\\tfunction organizationCount() external view returns (uint256);\\n\\tfunction packageIds(bytes32 organizationId, uint256 start, uint256 count) external view returns (bytes32[] memory);\\n\\tfunction packageCount(bytes32 organizationId) external view returns (uint256);\\n  function packageExists(bytes32 packageId) external view returns (bool);\\n\\tfunction packageOwner(bytes32 packageId) external view returns (address);\\n\\tfunction packageController(bytes32 packageId) external view returns (address);\\n\\tfunction packageOrganizationId(bytes32 packageId) external view returns (bytes32);\\n\\tfunction package(bytes32 packageId) external view returns (bool exists, address owner, address controller, bytes32 organizationId);\\n}\",\"keccak256\":\"0x01b58b2819948b61e79f87f60747bbfccad4f0f41188d2dfdeeefbd34cadaca1\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/interfaces/IVersionRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IVersionRegistry {\\n\\tstruct VersionNodeMetadata {\\n    bool exists;\\n    bool leaf;\\n    uint8 level;\\n    uint256 latestPrereleaseVersion; \\n    uint256 latestReleaseVersion;\\n  }\\n\\n\\tevent TrustedVersionPublisherSet(address trustedVersionPublisher);\\n\\tevent VersionPublished(bytes32 indexed packageId, bytes32 indexed versionNodeId, bytes versionBytes, bytes32 buildMetadata, string location);\\n\\t\\n\\tfunction publishVersion(bytes32 packageId, bytes memory versionBytes, bytes32 buildMetadata, string memory location) external returns (bytes32 nodeId);\\n\\tfunction versionExists(bytes32 packageId) external view returns (bool);\\n\\tfunction versionCount(bytes32 packageId) external view returns (uint256);\\n\\tfunction versionLocation(bytes32 nodeId) external view returns (string memory);\\n\\tfunction versionMetadata(bytes32 versionNodeId) external virtual view returns (VersionNodeMetadata memory nodeMetadata);\\n\\tfunction versionBuildMetadata(bytes32 nodeId) external view returns (bytes32);\\n\\tfunction version(bytes32 nodeId) external view returns (bool leaf, bool created, uint8 level, uint256 latestPrereleaseVersion, uint256 latestReleaseVersion, bytes32 buildMetadata, string memory location);\\n\\tfunction versionIds(bytes32 packageId, uint256 start, uint256 count) external view returns (bytes32[] memory);\\n}\",\"keccak256\":\"0x334bf07438cbbb45c6b2c6681f2d4d8b4b413298e077a1e08fd33b962768d419\",\"license\":\"MIT\"},\"contracts/versioning/registry/v1/interfaces/IVersionResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IVersionResolver {\\n\\tfunction latestReleaseNode(bytes32 versionNodeId) external view returns (bytes32 nodeId);\\n\\tfunction latestPrereleaseNode(bytes32 versionNodeId) external view returns (bytes32 nodeId);\\n\\tfunction latestReleaseLocation(bytes32 versionNodeId) external view returns (string memory location);\\n\\tfunction latestPrereleaseLocation(bytes32 versionNodeId) external view returns (string memory location);\\n}\",\"keccak256\":\"0xc4c62d593b58ecb73fdbe92983a64aaf451578b692ffaed68f544cd9a5313cc5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004ef638038062004ef68339818101604052810190620000379190620008e3565b8181620000496200014a60201b60201c565b805182511462000090576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200008790620009ef565b60405180910390fd5b60005b82518110156200013f57818181518110620000b357620000b262000a11565b5b6020026020010151606a6000858481518110620000d557620000d462000a11565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080620001369062000a79565b91505062000093565b505050505062000b5f565b600060019054906101000a900460ff168062000171575060008054906101000a900460ff16155b620001b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001aa9062000b3d565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000204576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620002146200023960201b60201c565b8015620002365760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062000260575060008054906101000a900460ff16155b620002a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002999062000b3d565b60405180910390fd5b60008060019054906101000a900460ff161590508015620002f3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620003036200033860201b60201c565b620003136200041760201b60201c565b8015620003355760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806200035f575060008054906101000a900460ff16155b620003a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003989062000b3d565b60405180910390fd5b60008060019054906101000a900460ff161590508015620003f2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620004145760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806200043e575060008054906101000a900460ff16155b62000480576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004779062000b3d565b60405180910390fd5b60008060019054906101000a900460ff161590508015620004d1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620004f1620004e56200051660201b60201c565b6200051e60201b60201c565b8015620005135760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200064882620005fd565b810181811067ffffffffffffffff821117156200066a57620006696200060e565b5b80604052505050565b60006200067f620005e4565b90506200068d82826200063d565b919050565b600067ffffffffffffffff821115620006b057620006af6200060e565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620006db81620006c6565b8114620006e757600080fd5b50565b600081519050620006fb81620006d0565b92915050565b600062000718620007128462000692565b62000673565b905080838252602082019050602084028301858111156200073e576200073d620006c1565b5b835b818110156200076b5780620007568882620006ea565b84526020840193505060208101905062000740565b5050509392505050565b600082601f8301126200078d576200078c620005f8565b5b81516200079f84826020860162000701565b91505092915050565b600067ffffffffffffffff821115620007c657620007c56200060e565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200080482620007d7565b9050919050565b6200081681620007f7565b81146200082257600080fd5b50565b60008151905062000836816200080b565b92915050565b6000620008536200084d84620007a8565b62000673565b90508083825260208201905060208402830185811115620008795762000878620006c1565b5b835b81811015620008a6578062000891888262000825565b8452602084019350506020810190506200087b565b5050509392505050565b600082601f830112620008c857620008c7620005f8565b5b8151620008da8482602086016200083c565b91505092915050565b60008060408385031215620008fd57620008fc620005ee565b5b600083015167ffffffffffffffff8111156200091e576200091d620005f3565b5b6200092c8582860162000775565b925050602083015167ffffffffffffffff81111562000950576200094f620005f3565b5b6200095e85828601620008b0565b9150509250929050565b600082825260208201905092915050565b7f526567697374727920617272617973206d75737420686176652074686520736160008201527f6d65206c656e6774680000000000000000000000000000000000000000000000602082015250565b6000620009d760298362000968565b9150620009e48262000979565b604082019050919050565b6000602082019050818103600083015262000a0a81620009c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600062000a868262000a6f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000abc5762000abb62000a40565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600062000b25602e8362000968565b915062000b328262000ac7565b604082019050919050565b6000602082019050818103600083015262000b588162000b16565b9050919050565b6143878062000b6f6000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80638fb71f881161013b578063c39e4d22116100b8578063f1c621041161007c578063f1c62104146107d0578063f2fde38b146107ee578063fcbb07461461080a578063fde40cb61461083a578063fec98c371461087057610248565b8063c39e4d22146106e0578063db46052214610710578063dc62c99b14610740578063e2af80b614610770578063e9022783146107a057610248565b8063ac53eb69116100ff578063ac53eb6914610618578063ae60d1b914610634578063b9c03fca14610650578063bb814e9e14610680578063c31eac46146106b057610248565b80638fb71f881461054e578063949d9ef01461057e578063a3c02f621461059a578063a9b35240146105cc578063aa73697e146105fc57610248565b8063715018a6116101c95780637b341a7b1161018d5780637b341a7b146104be5780637de6d9e4146104da5780637ee19b591461050a5780638129fc1c146105265780638da5cb5b1461053057610248565b8063715018a614610408578063723a7b5c14610412578063739f047614610442578063745d85c0146104725780637a25bec3146104a257610248565b8063417bd28711610210578063417bd28714610315578063565d66601461034857806357a677ac146103785780635f49d4d1146103a85780636e644f13146103d857610248565b80630e72a0e11461024d5780631c43eb491461027d5780632406cedb146102ad5780632bcc2f23146102c95780633531a04f146102f9575b600080fd5b610267600480360381019061026291906134bc565b6108a0565b60405161027491906134f8565b60405180910390f35b610297600480360381019061029291906134bc565b6108c0565b6040516102a491906135ac565b60405180910390f35b6102c760048036038101906102c2919061362c565b6108fd565b005b6102e360048036038101906102de91906134bc565b6109be565b6040516102f09190613685565b60405180910390f35b610313600480360381019061030e91906136a0565b6109e1565b005b61032f600480360381019061032a91906134bc565b610acd565b60405161033f949392919061371d565b60405180910390f35b610362600480360381019061035d91906134bc565b610b8b565b60405161036f9190613762565b60405180910390f35b610392600480360381019061038d91906134bc565b610bcb565b60405161039f91906134f8565b60405180910390f35b6103c260048036038101906103bd91906134bc565b610cb5565b6040516103cf9190613762565b60405180910390f35b6103f260048036038101906103ed91906137a9565b610cf5565b6040516103ff91906138a7565b60405180910390f35b610410610deb565b005b61042c600480360381019061042791906134bc565b610e73565b60405161043991906134f8565b60405180910390f35b61045c600480360381019061045791906134bc565b610e93565b6040516104699190613762565b60405180910390f35b61048c600480360381019061048791906134bc565b610ec6565b604051610499919061396b565b60405180910390f35b6104bc60048036038101906104b7919061362c565b610fa7565b005b6104d860048036038101906104d3919061362c565b611134565b005b6104f460048036038101906104ef9190613986565b6111df565b60405161050191906138a7565b60405180910390f35b610524600480360381019061051f919061362c565b611335565b005b61052e6114c2565b005b6105386115a3565b6040516105459190613762565b60405180910390f35b610568600480360381019061056391906134bc565b6115cd565b60405161057591906139d9565b60405180910390f35b6105986004803603810190610593919061362c565b6115fa565b005b6105b460048036038101906105af91906134bc565b6116a5565b6040516105c3939291906139f4565b60405180910390f35b6105e660048036038101906105e191906134bc565b611807565b6040516105f391906139d9565b60405180910390f35b6106166004803603810190610611919061362c565b611834565b005b610632600480360381019061062d9190613a2b565b6119c1565b005b61064e6004803603810190610649919061362c565b611bc4565b005b61066a600480360381019061066591906134bc565b611c6f565b60405161067791906135ac565b60405180910390f35b61069a600480360381019061069591906134bc565b611d17565b6040516106a791906139d9565b60405180910390f35b6106ca60048036038101906106c591906134bc565b611d2d565b6040516106d791906134f8565b60405180910390f35b6106fa60048036038101906106f591906134bc565b611df5565b6040516107079190613685565b60405180910390f35b61072a600480360381019061072591906134bc565b611e15565b6040516107379190613762565b60405180910390f35b61075a600480360381019061075591906134bc565b611e55565b6040516107679190613762565b60405180910390f35b61078a600480360381019061078591906134bc565b611e95565b60405161079791906135ac565b60405180910390f35b6107ba60048036038101906107b59190613c68565b611ed2565b6040516107c791906134f8565b60405180910390f35b6107d86124ad565b6040516107e59190613685565b60405180910390f35b61080860048036038101906108039190613d07565b6124ba565b005b610824600480360381019061081f9190613d34565b6125b2565b6040516108319190613762565b60405180910390f35b610854600480360381019061084f91906134bc565b6126d5565b6040516108679796959493929190613d83565b60405180910390f35b61088a60048036038101906108859190613986565b612732565b60405161089791906138a7565b60405180910390f35b600060676000838152602001908152602001600020600201549050919050565b606060006108cd83610bcb565b90506108d8816126d5565b9091929394955090919293945090919293509091925090915090508092505050919050565b60676000838152602001908152602001600020600201546065600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109af576040517f45b1c47900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b98383612886565b505050565b600060656000838152602001908152602001600020600201805490509050919050565b60006109ed84846125b2565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a54576040517fbc70757700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008484604051602001610a69929190613e1a565b604051602081830303815290604052805190602001209050610a8b8184612980565b83857f925b3259c7788847816fec2357281352c65ac8d716eb107683d4e7c028e7ec4b8486604051610abe929190613e46565b60405180910390a35050505050565b6000806000806067600086815260200190815260200160002060000160009054906101000a900460ff166067600087815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166067600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606760008981526020019081526020016000206002015493509350935093509193509193565b60006065600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806000806000610bdc866126d5565b965050955050945050935083610c1e576040517f4825e09300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038360ff161415610c7257600081511415610c66576040517f4825e09300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85945050505050610cb0565b60008683604051602001610c87929190613e90565b604051602081830303815290604052805190602001209050610ca881610bcb565b955050505050505b919050565b60006067600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600060668054905090506000818486610d109190613eeb565b11610d1b5783610d28565b8482610d279190613f41565b5b905060008167ffffffffffffffff811115610d4657610d45613a9c565b5b604051908082528060200260200182016040528015610d745781602001602082028036833780820191505090505b50905060005b82811015610dde5760668188610d909190613eeb565b81548110610da157610da0613f75565b5b9060005260206000200154828281518110610dbf57610dbe613f75565b5b6020026020010181815250508080610dd690613fa4565b915050610d7a565b5080935050505092915050565b610df3612af1565b73ffffffffffffffffffffffffffffffffffffffff16610e116115a3565b73ffffffffffffffffffffffffffffffffffffffff1614610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e90614039565b60405180910390fd5b610e716000612af9565b565b600060686000838152602001908152602001600020600101549050919050565b606a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ece613399565b600060686000848152602001908152602001600020600001549050600060f882901c9050608080821660ff1614610f06576000610f09565b60015b8360000190151590811515815250508260000151610f28575050610fa2565b603f8116836040019060ff16908160ff1681525050604080821660ff1614610f51576000610f54565b60015b8360200190151590811515815250506f01ffffffffffffffffffffffffffffff607983901c168360600181815250506f01ffffffffffffffffffffffffffffff821683608001818152505050505b919050565b816065600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611043576040517f45b1c47900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006065600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826065600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16857f3fda6cd50fa8d1dbcb1f06215a0c3816cb3a56b4ea508e16ab9ab87d3046937460405160405180910390a450505050565b816067600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d0576040517f2518495200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111da8383612886565b505050565b606060006069600086815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561124057602002820191906000526020600020905b81548152602001906001019080831161122c575b50505050509050600081519050600081858761125c9190613eeb565b116112675784611274565b85826112739190613f41565b5b905060008167ffffffffffffffff81111561129257611291613a9c565b5b6040519080825280602002602001820160405280156112c05781602001602082028036833780820191505090505b50905060005b82811015611326578481896112db9190613eeb565b815181106112ec576112eb613f75565b5b602002602001015182828151811061130757611306613f75565b5b602002602001018181525050808061131e90613fa4565b9150506112c6565b50809450505050509392505050565b816065600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113d1576040517fcf8c4f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006065600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826065600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16857f3fda6cd50fa8d1dbcb1f06215a0c3816cb3a56b4ea508e16ab9ab87d3046937460405160405180910390a450505050565b600060019054906101000a900460ff16806114e8575060008054906101000a900460ff16155b611527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151e906140cb565b60405180910390fd5b60008060019054906101000a900460ff161590508015611577576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61157f612bbf565b80156115a05760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006065600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b816067600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611696576040517f2518495200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116a08383612ca8565b505050565b600080600080606560008681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156117df57602002820191906000526020600020905b8154815260200190600101908083116117cb575b5050505050815250509050806000015181602001518260400151935093509350509193909250565b60006067600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b816065600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118d0576040517fcf8c4f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006065600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826065600086815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16857f85c717197f83952cb105cd53e53ed466b416b7e9f5a40dc530984c4bdb36f7f260405160405180910390a450505050565b836065600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a5d576040517f45b1c47900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008585604051602001611a72929190613e1a565b6040516020818303038152906040528051906020012090506067600082815260200190815260200160002060000160009054906101000a900460ff1615611ae5576040517f6261819600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016067600083815260200190815260200160002060000160006101000a81548160ff021916908315150217905550856067600083815260200190815260200160002060020181905550606560008781526020019081526020016000206002018190806001815401808255809150506001900390600052602060002001600090919091909150558481877f184ba37f65f345dab70812c18dfd46c7488d7e1d5f09fdfc389cb35984d07f0b8787604051611ba0929190613e46565b60405180910390a4611bb28185612886565b611bbc8184612ca8565b505050505050565b816067600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c60576040517f6e65cf1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c6a8383612ca8565b505050565b6060606860008381526020019081526020016000206002018054611c929061411a565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbe9061411a565b8015611d0b5780601f10611ce057610100808354040283529160200191611d0b565b820191906000526020600020905b815481529060010190602001808311611cee57829003601f168201915b50505050509050919050565b6000611d2282610ec6565b600001519050919050565b600080600080600080611d3f876126d5565b96505050945094509450945084611d82576040517f4825e09300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8380611d9f575060038360ff16148015611d9e57506000815114155b5b15611db1578695505050505050611df0565b60008783604051602001611dc6929190613e90565b604051602081830303815290604052805190602001209050611de781611d2d565b96505050505050505b919050565b600060696000838152602001908152602001600020805490509050919050565b60006065600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006067600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606000611ea283611d2d565b9050611ead816126d5565b9091929394955090919293945090919293509091925090915090508092505050919050565b60006067600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f6f576040517f6e65cf1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080611f7b87610ec6565b90508060000151611f9c576001915060018160000190151590811515815250505b600086600081518110611fb257611fb1613f75565b5b602001015160f81c60f81b60f81c905060418160ff161115612000576040517fc6105ff100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038160ff16101561203e576040517f8956e45a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8793506000808060008060038660ff1611905060008060218e0190505b8760ff168460ff16101561231657600184612076919061414c565b9350600160028561208791906141b2565b60ff1614156120cd57805195506020810190506f01ffffffffffffffffffffffffffffff861694506f01ffffffffffffffffffffffffffffff607987901c1695506120d5565b849550600094505b60038460ff16111580156121295750600060f81b8660001b601060208110612100576120ff613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15612160576040517fe1c1fe3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018460ff161480156121735750600086145b1561217d57600191505b85896060015110156121985785896060018181525050600199505b821580156121a95750858960800151105b156121bd5785896080018181525050600199505b8860200151156121dd576000896020019015159081151581525050600199505b89156121f2576121ed8b8a612da2565b600099505b8a86604051602001612205929190613e90565b604051602081830303815290604052805190602001209a506122268b610ec6565b9850886000015161230c5760018960000190151590811515815250506001995061224f86612e1e565b612285576040517feb48439100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83896040019060ff16908160ff1681525050811580156122b6575060028460ff1614806122b5575060038460ff16145b5b80156122bf5750865b80156122cc575060008614155b15612303576040517fc7cbebf500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60019650612311565b600096505b61205b565b505050505050600060686000878152602001908152602001600020600201805461233f9061411a565b905014612378576040517fe3847f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b856068600087815260200190815260200160002060020190805190602001906123a29291906133cf565b50606960008a81526020019081526020016000208590806001815401808255809150506001900390600052602060002001600090919091909150556000801b8714612442576123f087612e81565b612426576040517fb441c5e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660686000878152602001908152602001600020600101819055505b801561245a5760018360200190151590811515815250505b6124648584612da2565b84897f64f62809eba00d9f6aacc66cab2d923315f49a84cf430926b39b8847a3b89cea8a8a8a60405161249993929190614238565b60405180910390a350505050949350505050565b6000606680549050905090565b6124c2612af1565b73ffffffffffffffffffffffffffffffffffffffff166124e06115a3565b73ffffffffffffffffffffffffffffffffffffffff1614612536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252d90614039565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259d906142ef565b60405180910390fd5b6125af81612af9565b50565b600080606a600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612652576040517fc072668500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166311d4c3a2846040518263ffffffff1660e01b815260040161268b91906134f8565b602060405180830381865afa1580156126a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cc9190614324565b91505092915050565b600080600080600080606060006126eb89610ec6565b90508060000151816020015182604001518360600151846080015161270f8e610e73565b6127188f611c6f565b975097509750975097509750975050919395979092949650565b606060006065600086815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561279657602002820191906000526020600020905b815481526020019060010190808311612782575b505050505090506000815184866127ad9190613eeb565b116127b857836127c6565b8482516127c59190613f41565b5b905060008167ffffffffffffffff8111156127e4576127e3613a9c565b5b6040519080825280602002602001820160405280156128125781602001602082028036833780820191505090505b50905060005b828110156128785783818861282d9190613eeb565b8151811061283e5761283d613f75565b5b602002602001015182828151811061285957612858613f75565b5b602002602001018181525050808061287090613fa4565b915050612818565b508093505050509392505050565b60006067600084815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816067600085815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f6aa62eccb78c33066e1cfdc6f24eb705e9dac6d8e10a55b780b45f99612ab8368560405161297391906134f8565b60405180910390a3505050565b6065600083815260200190815260200160002060000160009054906101000a900460ff16612a0157606682908060018154018082558091505060019003906000526020600020016000909190919091505560016065600084815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505b60006065600084815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816065600085815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16847f85c717197f83952cb105cd53e53ed466b416b7e9f5a40dc530984c4bdb36f7f260405160405180910390a4505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680612be5575060008054906101000a900460ff16155b612c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1b906140cb565b60405180910390fd5b60008060019054906101000a900460ff161590508015612c74576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612c7c613155565b612c8461322e565b8015612ca55760008060016101000a81548160ff0219169083151502179055505b50565b60006067600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816067600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fba1fae2fef052a7dbeb9a9f7b6a18291f8db075f74830fafa39224cb46b7862a85604051612d9591906134f8565b60405180910390a3505050565b600060078260000151612db6576000612db9565b60015b60ff16901b60068360200151612dd0576000612dd3565b60015b60ff16901b836040015117179050600060798360600151901b836080015160f88460ff16901b1717905080606860008681526020019081526020016000206000018190555050505050565b60008060f81b8260001b601060208110612e3b57612e3a613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612e705760019050612e7c565b612e7982613317565b90505b919050565b6000806000905060005b602081101561314957600060f81b848260208110612eac57612eab613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612ee15760019150613136565b818015612f2a5750600060f81b848260208110612f0157612f00613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15612f3a57600092505050613150565b603060f81b848260208110612f5257612f51613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015612fc25750603960f81b848260208110612f9957612f98613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b806130515750604160f81b848260208110612fe057612fdf613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156130505750605a60f81b84826020811061302757613026613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b5b806130e05750606160f81b84826020811061306f5761306e613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156130df5750607a60f81b8482602081106130b6576130b5613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b5b806131265750602d60f81b8482602081106130fe576130fd613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61313557600092505050613150565b5b808061314190613fa4565b915050612e8b565b5060019150505b919050565b600060019054906101000a900460ff168061317b575060008054906101000a900460ff16155b6131ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131b1906140cb565b60405180910390fd5b60008060019054906101000a900460ff16159050801561320a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561322b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680613254575060008054906101000a900460ff16155b613293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161328a906140cb565b60405180910390fd5b60008060019054906101000a900460ff1615905080156132e3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6132f36132ee612af1565b612af9565b80156133145760008060016101000a81548160ff0219169083151502179055505b50565b6000806000905060006effffffffffffffffffffffffffffff841693505b607881101561338e576000603f8286901c1690506006826133569190613eeb565b91506000811461336a576001925050613335565b8280156133775750600081145b156133885760009350505050613394565b50613335565b81925050505b919050565b6040518060a00160405280600015158152602001600015158152602001600060ff16815260200160008152602001600081525090565b8280546133db9061411a565b90600052602060002090601f0160209004810192826133fd5760008555613444565b82601f1061341657805160ff1916838001178555613444565b82800160010185558215613444579182015b82811115613443578251825591602001919060010190613428565b5b5090506134519190613455565b5090565b5b8082111561346e576000816000905550600101613456565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61349981613486565b81146134a457600080fd5b50565b6000813590506134b681613490565b92915050565b6000602082840312156134d2576134d161347c565b5b60006134e0848285016134a7565b91505092915050565b6134f281613486565b82525050565b600060208201905061350d60008301846134e9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561354d578082015181840152602081019050613532565b8381111561355c576000848401525b50505050565b6000601f19601f8301169050919050565b600061357e82613513565b613588818561351e565b935061359881856020860161352f565b6135a181613562565b840191505092915050565b600060208201905081810360008301526135c68184613573565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135f9826135ce565b9050919050565b613609816135ee565b811461361457600080fd5b50565b60008135905061362681613600565b92915050565b600080604083850312156136435761364261347c565b5b6000613651858286016134a7565b925050602061366285828601613617565b9150509250929050565b6000819050919050565b61367f8161366c565b82525050565b600060208201905061369a6000830184613676565b92915050565b6000806000606084860312156136b9576136b861347c565b5b60006136c7868287016134a7565b93505060206136d8868287016134a7565b92505060406136e986828701613617565b9150509250925092565b60008115159050919050565b613708816136f3565b82525050565b613717816135ee565b82525050565b600060808201905061373260008301876136ff565b61373f602083018661370e565b61374c604083018561370e565b61375960608301846134e9565b95945050505050565b6000602082019050613777600083018461370e565b92915050565b6137868161366c565b811461379157600080fd5b50565b6000813590506137a38161377d565b92915050565b600080604083850312156137c0576137bf61347c565b5b60006137ce85828601613794565b92505060206137df85828601613794565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61381e81613486565b82525050565b60006138308383613815565b60208301905092915050565b6000602082019050919050565b6000613854826137e9565b61385e81856137f4565b935061386983613805565b8060005b8381101561389a5781516138818882613824565b975061388c8361383c565b92505060018101905061386d565b5085935050505092915050565b600060208201905081810360008301526138c18184613849565b905092915050565b6138d2816136f3565b82525050565b600060ff82169050919050565b6138ee816138d8565b82525050565b6138fd8161366c565b82525050565b60a08201600082015161391960008501826138c9565b50602082015161392c60208501826138c9565b50604082015161393f60408501826138e5565b50606082015161395260608501826138f4565b50608082015161396560808501826138f4565b50505050565b600060a0820190506139806000830184613903565b92915050565b60008060006060848603121561399f5761399e61347c565b5b60006139ad868287016134a7565b93505060206139be86828701613794565b92505060406139cf86828701613794565b9150509250925092565b60006020820190506139ee60008301846136ff565b92915050565b6000606082019050613a0960008301866136ff565b613a16602083018561370e565b613a23604083018461370e565b949350505050565b60008060008060808587031215613a4557613a4461347c565b5b6000613a53878288016134a7565b9450506020613a64878288016134a7565b9350506040613a7587828801613617565b9250506060613a8687828801613617565b91505092959194509250565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ad482613562565b810181811067ffffffffffffffff82111715613af357613af2613a9c565b5b80604052505050565b6000613b06613472565b9050613b128282613acb565b919050565b600067ffffffffffffffff821115613b3257613b31613a9c565b5b613b3b82613562565b9050602081019050919050565b82818337600083830152505050565b6000613b6a613b6584613b17565b613afc565b905082815260208101848484011115613b8657613b85613a97565b5b613b91848285613b48565b509392505050565b600082601f830112613bae57613bad613a92565b5b8135613bbe848260208601613b57565b91505092915050565b600067ffffffffffffffff821115613be257613be1613a9c565b5b613beb82613562565b9050602081019050919050565b6000613c0b613c0684613bc7565b613afc565b905082815260208101848484011115613c2757613c26613a97565b5b613c32848285613b48565b509392505050565b600082601f830112613c4f57613c4e613a92565b5b8135613c5f848260208601613bf8565b91505092915050565b60008060008060808587031215613c8257613c8161347c565b5b6000613c90878288016134a7565b945050602085013567ffffffffffffffff811115613cb157613cb0613481565b5b613cbd87828801613b99565b9350506040613cce878288016134a7565b925050606085013567ffffffffffffffff811115613cef57613cee613481565b5b613cfb87828801613c3a565b91505092959194509250565b600060208284031215613d1d57613d1c61347c565b5b6000613d2b84828501613617565b91505092915050565b60008060408385031215613d4b57613d4a61347c565b5b6000613d59858286016134a7565b9250506020613d6a858286016134a7565b9150509250929050565b613d7d816138d8565b82525050565b600060e082019050613d98600083018a6136ff565b613da560208301896136ff565b613db26040830188613d74565b613dbf6060830187613676565b613dcc6080830186613676565b613dd960a08301856134e9565b81810360c0830152613deb8184613573565b905098975050505050505050565b6000819050919050565b613e14613e0f82613486565b613df9565b82525050565b6000613e268285613e03565b602082019150613e368284613e03565b6020820191508190509392505050565b6000604082019050613e5b600083018561370e565b613e68602083018461370e565b9392505050565b6000819050919050565b613e8a613e858261366c565b613e6f565b82525050565b6000613e9c8285613e03565b602082019150613eac8284613e79565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ef68261366c565b9150613f018361366c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f3657613f35613ebc565b5b828201905092915050565b6000613f4c8261366c565b9150613f578361366c565b925082821015613f6a57613f69613ebc565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613faf8261366c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fe257613fe1613ebc565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061402360208361351e565b915061402e82613fed565b602082019050919050565b6000602082019050818103600083015261405281614016565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006140b5602e8361351e565b91506140c082614059565b604082019050919050565b600060208201905081810360008301526140e4816140a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061413257607f821691505b60208210811415614146576141456140eb565b5b50919050565b6000614157826138d8565b9150614162836138d8565b92508260ff0382111561417857614177613ebc565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006141bd826138d8565b91506141c8836138d8565b9250826141d8576141d7614183565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061420a826141e3565b61421481856141ee565b935061422481856020860161352f565b61422d81613562565b840191505092915050565b6000606082019050818103600083015261425281866141ff565b905061426160208301856134e9565b81810360408301526142738184613573565b9050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006142d960268361351e565b91506142e48261427d565b604082019050919050565b60006020820190508181036000830152614308816142cc565b9050919050565b60008151905061431e81613600565b92915050565b60006020828403121561433a5761433961347c565b5b60006143488482850161430f565b9150509291505056fea2646970667358221220731999a30fada2a3b77f24d40ffb37e53aac0c255945832747f11a98e5c8a1c664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c80638fb71f881161013b578063c39e4d22116100b8578063f1c621041161007c578063f1c62104146107d0578063f2fde38b146107ee578063fcbb07461461080a578063fde40cb61461083a578063fec98c371461087057610248565b8063c39e4d22146106e0578063db46052214610710578063dc62c99b14610740578063e2af80b614610770578063e9022783146107a057610248565b8063ac53eb69116100ff578063ac53eb6914610618578063ae60d1b914610634578063b9c03fca14610650578063bb814e9e14610680578063c31eac46146106b057610248565b80638fb71f881461054e578063949d9ef01461057e578063a3c02f621461059a578063a9b35240146105cc578063aa73697e146105fc57610248565b8063715018a6116101c95780637b341a7b1161018d5780637b341a7b146104be5780637de6d9e4146104da5780637ee19b591461050a5780638129fc1c146105265780638da5cb5b1461053057610248565b8063715018a614610408578063723a7b5c14610412578063739f047614610442578063745d85c0146104725780637a25bec3146104a257610248565b8063417bd28711610210578063417bd28714610315578063565d66601461034857806357a677ac146103785780635f49d4d1146103a85780636e644f13146103d857610248565b80630e72a0e11461024d5780631c43eb491461027d5780632406cedb146102ad5780632bcc2f23146102c95780633531a04f146102f9575b600080fd5b610267600480360381019061026291906134bc565b6108a0565b60405161027491906134f8565b60405180910390f35b610297600480360381019061029291906134bc565b6108c0565b6040516102a491906135ac565b60405180910390f35b6102c760048036038101906102c2919061362c565b6108fd565b005b6102e360048036038101906102de91906134bc565b6109be565b6040516102f09190613685565b60405180910390f35b610313600480360381019061030e91906136a0565b6109e1565b005b61032f600480360381019061032a91906134bc565b610acd565b60405161033f949392919061371d565b60405180910390f35b610362600480360381019061035d91906134bc565b610b8b565b60405161036f9190613762565b60405180910390f35b610392600480360381019061038d91906134bc565b610bcb565b60405161039f91906134f8565b60405180910390f35b6103c260048036038101906103bd91906134bc565b610cb5565b6040516103cf9190613762565b60405180910390f35b6103f260048036038101906103ed91906137a9565b610cf5565b6040516103ff91906138a7565b60405180910390f35b610410610deb565b005b61042c600480360381019061042791906134bc565b610e73565b60405161043991906134f8565b60405180910390f35b61045c600480360381019061045791906134bc565b610e93565b6040516104699190613762565b60405180910390f35b61048c600480360381019061048791906134bc565b610ec6565b604051610499919061396b565b60405180910390f35b6104bc60048036038101906104b7919061362c565b610fa7565b005b6104d860048036038101906104d3919061362c565b611134565b005b6104f460048036038101906104ef9190613986565b6111df565b60405161050191906138a7565b60405180910390f35b610524600480360381019061051f919061362c565b611335565b005b61052e6114c2565b005b6105386115a3565b6040516105459190613762565b60405180910390f35b610568600480360381019061056391906134bc565b6115cd565b60405161057591906139d9565b60405180910390f35b6105986004803603810190610593919061362c565b6115fa565b005b6105b460048036038101906105af91906134bc565b6116a5565b6040516105c3939291906139f4565b60405180910390f35b6105e660048036038101906105e191906134bc565b611807565b6040516105f391906139d9565b60405180910390f35b6106166004803603810190610611919061362c565b611834565b005b610632600480360381019061062d9190613a2b565b6119c1565b005b61064e6004803603810190610649919061362c565b611bc4565b005b61066a600480360381019061066591906134bc565b611c6f565b60405161067791906135ac565b60405180910390f35b61069a600480360381019061069591906134bc565b611d17565b6040516106a791906139d9565b60405180910390f35b6106ca60048036038101906106c591906134bc565b611d2d565b6040516106d791906134f8565b60405180910390f35b6106fa60048036038101906106f591906134bc565b611df5565b6040516107079190613685565b60405180910390f35b61072a600480360381019061072591906134bc565b611e15565b6040516107379190613762565b60405180910390f35b61075a600480360381019061075591906134bc565b611e55565b6040516107679190613762565b60405180910390f35b61078a600480360381019061078591906134bc565b611e95565b60405161079791906135ac565b60405180910390f35b6107ba60048036038101906107b59190613c68565b611ed2565b6040516107c791906134f8565b60405180910390f35b6107d86124ad565b6040516107e59190613685565b60405180910390f35b61080860048036038101906108039190613d07565b6124ba565b005b610824600480360381019061081f9190613d34565b6125b2565b6040516108319190613762565b60405180910390f35b610854600480360381019061084f91906134bc565b6126d5565b6040516108679796959493929190613d83565b60405180910390f35b61088a60048036038101906108859190613986565b612732565b60405161089791906138a7565b60405180910390f35b600060676000838152602001908152602001600020600201549050919050565b606060006108cd83610bcb565b90506108d8816126d5565b9091929394955090919293945090919293509091925090915090508092505050919050565b60676000838152602001908152602001600020600201546065600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109af576040517f45b1c47900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b98383612886565b505050565b600060656000838152602001908152602001600020600201805490509050919050565b60006109ed84846125b2565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a54576040517fbc70757700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008484604051602001610a69929190613e1a565b604051602081830303815290604052805190602001209050610a8b8184612980565b83857f925b3259c7788847816fec2357281352c65ac8d716eb107683d4e7c028e7ec4b8486604051610abe929190613e46565b60405180910390a35050505050565b6000806000806067600086815260200190815260200160002060000160009054906101000a900460ff166067600087815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166067600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606760008981526020019081526020016000206002015493509350935093509193509193565b60006065600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806000806000610bdc866126d5565b965050955050945050935083610c1e576040517f4825e09300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038360ff161415610c7257600081511415610c66576040517f4825e09300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85945050505050610cb0565b60008683604051602001610c87929190613e90565b604051602081830303815290604052805190602001209050610ca881610bcb565b955050505050505b919050565b60006067600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600060668054905090506000818486610d109190613eeb565b11610d1b5783610d28565b8482610d279190613f41565b5b905060008167ffffffffffffffff811115610d4657610d45613a9c565b5b604051908082528060200260200182016040528015610d745781602001602082028036833780820191505090505b50905060005b82811015610dde5760668188610d909190613eeb565b81548110610da157610da0613f75565b5b9060005260206000200154828281518110610dbf57610dbe613f75565b5b6020026020010181815250508080610dd690613fa4565b915050610d7a565b5080935050505092915050565b610df3612af1565b73ffffffffffffffffffffffffffffffffffffffff16610e116115a3565b73ffffffffffffffffffffffffffffffffffffffff1614610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e90614039565b60405180910390fd5b610e716000612af9565b565b600060686000838152602001908152602001600020600101549050919050565b606a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ece613399565b600060686000848152602001908152602001600020600001549050600060f882901c9050608080821660ff1614610f06576000610f09565b60015b8360000190151590811515815250508260000151610f28575050610fa2565b603f8116836040019060ff16908160ff1681525050604080821660ff1614610f51576000610f54565b60015b8360200190151590811515815250506f01ffffffffffffffffffffffffffffff607983901c168360600181815250506f01ffffffffffffffffffffffffffffff821683608001818152505050505b919050565b816065600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611043576040517f45b1c47900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006065600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826065600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16857f3fda6cd50fa8d1dbcb1f06215a0c3816cb3a56b4ea508e16ab9ab87d3046937460405160405180910390a450505050565b816067600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d0576040517f2518495200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111da8383612886565b505050565b606060006069600086815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561124057602002820191906000526020600020905b81548152602001906001019080831161122c575b50505050509050600081519050600081858761125c9190613eeb565b116112675784611274565b85826112739190613f41565b5b905060008167ffffffffffffffff81111561129257611291613a9c565b5b6040519080825280602002602001820160405280156112c05781602001602082028036833780820191505090505b50905060005b82811015611326578481896112db9190613eeb565b815181106112ec576112eb613f75565b5b602002602001015182828151811061130757611306613f75565b5b602002602001018181525050808061131e90613fa4565b9150506112c6565b50809450505050509392505050565b816065600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113d1576040517fcf8c4f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006065600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826065600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16857f3fda6cd50fa8d1dbcb1f06215a0c3816cb3a56b4ea508e16ab9ab87d3046937460405160405180910390a450505050565b600060019054906101000a900460ff16806114e8575060008054906101000a900460ff16155b611527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151e906140cb565b60405180910390fd5b60008060019054906101000a900460ff161590508015611577576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61157f612bbf565b80156115a05760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006065600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b816067600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611696576040517f2518495200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116a08383612ca8565b505050565b600080600080606560008681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156117df57602002820191906000526020600020905b8154815260200190600101908083116117cb575b5050505050815250509050806000015181602001518260400151935093509350509193909250565b60006067600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b816065600082815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118d0576040517fcf8c4f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006065600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826065600086815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16857f85c717197f83952cb105cd53e53ed466b416b7e9f5a40dc530984c4bdb36f7f260405160405180910390a450505050565b836065600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a5d576040517f45b1c47900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008585604051602001611a72929190613e1a565b6040516020818303038152906040528051906020012090506067600082815260200190815260200160002060000160009054906101000a900460ff1615611ae5576040517f6261819600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016067600083815260200190815260200160002060000160006101000a81548160ff021916908315150217905550856067600083815260200190815260200160002060020181905550606560008781526020019081526020016000206002018190806001815401808255809150506001900390600052602060002001600090919091909150558481877f184ba37f65f345dab70812c18dfd46c7488d7e1d5f09fdfc389cb35984d07f0b8787604051611ba0929190613e46565b60405180910390a4611bb28185612886565b611bbc8184612ca8565b505050505050565b816067600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c60576040517f6e65cf1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c6a8383612ca8565b505050565b6060606860008381526020019081526020016000206002018054611c929061411a565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbe9061411a565b8015611d0b5780601f10611ce057610100808354040283529160200191611d0b565b820191906000526020600020905b815481529060010190602001808311611cee57829003601f168201915b50505050509050919050565b6000611d2282610ec6565b600001519050919050565b600080600080600080611d3f876126d5565b96505050945094509450945084611d82576040517f4825e09300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8380611d9f575060038360ff16148015611d9e57506000815114155b5b15611db1578695505050505050611df0565b60008783604051602001611dc6929190613e90565b604051602081830303815290604052805190602001209050611de781611d2d565b96505050505050505b919050565b600060696000838152602001908152602001600020805490509050919050565b60006065600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006067600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606000611ea283611d2d565b9050611ead816126d5565b9091929394955090919293945090919293509091925090915090508092505050919050565b60006067600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f6f576040517f6e65cf1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080611f7b87610ec6565b90508060000151611f9c576001915060018160000190151590811515815250505b600086600081518110611fb257611fb1613f75565b5b602001015160f81c60f81b60f81c905060418160ff161115612000576040517fc6105ff100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038160ff16101561203e576040517f8956e45a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8793506000808060008060038660ff1611905060008060218e0190505b8760ff168460ff16101561231657600184612076919061414c565b9350600160028561208791906141b2565b60ff1614156120cd57805195506020810190506f01ffffffffffffffffffffffffffffff861694506f01ffffffffffffffffffffffffffffff607987901c1695506120d5565b849550600094505b60038460ff16111580156121295750600060f81b8660001b601060208110612100576120ff613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15612160576040517fe1c1fe3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018460ff161480156121735750600086145b1561217d57600191505b85896060015110156121985785896060018181525050600199505b821580156121a95750858960800151105b156121bd5785896080018181525050600199505b8860200151156121dd576000896020019015159081151581525050600199505b89156121f2576121ed8b8a612da2565b600099505b8a86604051602001612205929190613e90565b604051602081830303815290604052805190602001209a506122268b610ec6565b9850886000015161230c5760018960000190151590811515815250506001995061224f86612e1e565b612285576040517feb48439100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83896040019060ff16908160ff1681525050811580156122b6575060028460ff1614806122b5575060038460ff16145b5b80156122bf5750865b80156122cc575060008614155b15612303576040517fc7cbebf500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60019650612311565b600096505b61205b565b505050505050600060686000878152602001908152602001600020600201805461233f9061411a565b905014612378576040517fe3847f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b856068600087815260200190815260200160002060020190805190602001906123a29291906133cf565b50606960008a81526020019081526020016000208590806001815401808255809150506001900390600052602060002001600090919091909150556000801b8714612442576123f087612e81565b612426576040517fb441c5e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660686000878152602001908152602001600020600101819055505b801561245a5760018360200190151590811515815250505b6124648584612da2565b84897f64f62809eba00d9f6aacc66cab2d923315f49a84cf430926b39b8847a3b89cea8a8a8a60405161249993929190614238565b60405180910390a350505050949350505050565b6000606680549050905090565b6124c2612af1565b73ffffffffffffffffffffffffffffffffffffffff166124e06115a3565b73ffffffffffffffffffffffffffffffffffffffff1614612536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252d90614039565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259d906142ef565b60405180910390fd5b6125af81612af9565b50565b600080606a600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612652576040517fc072668500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166311d4c3a2846040518263ffffffff1660e01b815260040161268b91906134f8565b602060405180830381865afa1580156126a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cc9190614324565b91505092915050565b600080600080600080606060006126eb89610ec6565b90508060000151816020015182604001518360600151846080015161270f8e610e73565b6127188f611c6f565b975097509750975097509750975050919395979092949650565b606060006065600086815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561279657602002820191906000526020600020905b815481526020019060010190808311612782575b505050505090506000815184866127ad9190613eeb565b116127b857836127c6565b8482516127c59190613f41565b5b905060008167ffffffffffffffff8111156127e4576127e3613a9c565b5b6040519080825280602002602001820160405280156128125781602001602082028036833780820191505090505b50905060005b828110156128785783818861282d9190613eeb565b8151811061283e5761283d613f75565b5b602002602001015182828151811061285957612858613f75565b5b602002602001018181525050808061287090613fa4565b915050612818565b508093505050509392505050565b60006067600084815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816067600085815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f6aa62eccb78c33066e1cfdc6f24eb705e9dac6d8e10a55b780b45f99612ab8368560405161297391906134f8565b60405180910390a3505050565b6065600083815260200190815260200160002060000160009054906101000a900460ff16612a0157606682908060018154018082558091505060019003906000526020600020016000909190919091505560016065600084815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505b60006065600084815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816065600085815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16847f85c717197f83952cb105cd53e53ed466b416b7e9f5a40dc530984c4bdb36f7f260405160405180910390a4505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680612be5575060008054906101000a900460ff16155b612c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1b906140cb565b60405180910390fd5b60008060019054906101000a900460ff161590508015612c74576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612c7c613155565b612c8461322e565b8015612ca55760008060016101000a81548160ff0219169083151502179055505b50565b60006067600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816067600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fba1fae2fef052a7dbeb9a9f7b6a18291f8db075f74830fafa39224cb46b7862a85604051612d9591906134f8565b60405180910390a3505050565b600060078260000151612db6576000612db9565b60015b60ff16901b60068360200151612dd0576000612dd3565b60015b60ff16901b836040015117179050600060798360600151901b836080015160f88460ff16901b1717905080606860008681526020019081526020016000206000018190555050505050565b60008060f81b8260001b601060208110612e3b57612e3a613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612e705760019050612e7c565b612e7982613317565b90505b919050565b6000806000905060005b602081101561314957600060f81b848260208110612eac57612eab613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612ee15760019150613136565b818015612f2a5750600060f81b848260208110612f0157612f00613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15612f3a57600092505050613150565b603060f81b848260208110612f5257612f51613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015612fc25750603960f81b848260208110612f9957612f98613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b806130515750604160f81b848260208110612fe057612fdf613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156130505750605a60f81b84826020811061302757613026613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b5b806130e05750606160f81b84826020811061306f5761306e613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156130df5750607a60f81b8482602081106130b6576130b5613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b5b806131265750602d60f81b8482602081106130fe576130fd613f75565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61313557600092505050613150565b5b808061314190613fa4565b915050612e8b565b5060019150505b919050565b600060019054906101000a900460ff168061317b575060008054906101000a900460ff16155b6131ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131b1906140cb565b60405180910390fd5b60008060019054906101000a900460ff16159050801561320a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561322b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680613254575060008054906101000a900460ff16155b613293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161328a906140cb565b60405180910390fd5b60008060019054906101000a900460ff1615905080156132e3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6132f36132ee612af1565b612af9565b80156133145760008060016101000a81548160ff0219169083151502179055505b50565b6000806000905060006effffffffffffffffffffffffffffff841693505b607881101561338e576000603f8286901c1690506006826133569190613eeb565b91506000811461336a576001925050613335565b8280156133775750600081145b156133885760009350505050613394565b50613335565b81925050505b919050565b6040518060a00160405280600015158152602001600015158152602001600060ff16815260200160008152602001600081525090565b8280546133db9061411a565b90600052602060002090601f0160209004810192826133fd5760008555613444565b82601f1061341657805160ff1916838001178555613444565b82800160010185558215613444579182015b82811115613443578251825591602001919060010190613428565b5b5090506134519190613455565b5090565b5b8082111561346e576000816000905550600101613456565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61349981613486565b81146134a457600080fd5b50565b6000813590506134b681613490565b92915050565b6000602082840312156134d2576134d161347c565b5b60006134e0848285016134a7565b91505092915050565b6134f281613486565b82525050565b600060208201905061350d60008301846134e9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561354d578082015181840152602081019050613532565b8381111561355c576000848401525b50505050565b6000601f19601f8301169050919050565b600061357e82613513565b613588818561351e565b935061359881856020860161352f565b6135a181613562565b840191505092915050565b600060208201905081810360008301526135c68184613573565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135f9826135ce565b9050919050565b613609816135ee565b811461361457600080fd5b50565b60008135905061362681613600565b92915050565b600080604083850312156136435761364261347c565b5b6000613651858286016134a7565b925050602061366285828601613617565b9150509250929050565b6000819050919050565b61367f8161366c565b82525050565b600060208201905061369a6000830184613676565b92915050565b6000806000606084860312156136b9576136b861347c565b5b60006136c7868287016134a7565b93505060206136d8868287016134a7565b92505060406136e986828701613617565b9150509250925092565b60008115159050919050565b613708816136f3565b82525050565b613717816135ee565b82525050565b600060808201905061373260008301876136ff565b61373f602083018661370e565b61374c604083018561370e565b61375960608301846134e9565b95945050505050565b6000602082019050613777600083018461370e565b92915050565b6137868161366c565b811461379157600080fd5b50565b6000813590506137a38161377d565b92915050565b600080604083850312156137c0576137bf61347c565b5b60006137ce85828601613794565b92505060206137df85828601613794565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61381e81613486565b82525050565b60006138308383613815565b60208301905092915050565b6000602082019050919050565b6000613854826137e9565b61385e81856137f4565b935061386983613805565b8060005b8381101561389a5781516138818882613824565b975061388c8361383c565b92505060018101905061386d565b5085935050505092915050565b600060208201905081810360008301526138c18184613849565b905092915050565b6138d2816136f3565b82525050565b600060ff82169050919050565b6138ee816138d8565b82525050565b6138fd8161366c565b82525050565b60a08201600082015161391960008501826138c9565b50602082015161392c60208501826138c9565b50604082015161393f60408501826138e5565b50606082015161395260608501826138f4565b50608082015161396560808501826138f4565b50505050565b600060a0820190506139806000830184613903565b92915050565b60008060006060848603121561399f5761399e61347c565b5b60006139ad868287016134a7565b93505060206139be86828701613794565b92505060406139cf86828701613794565b9150509250925092565b60006020820190506139ee60008301846136ff565b92915050565b6000606082019050613a0960008301866136ff565b613a16602083018561370e565b613a23604083018461370e565b949350505050565b60008060008060808587031215613a4557613a4461347c565b5b6000613a53878288016134a7565b9450506020613a64878288016134a7565b9350506040613a7587828801613617565b9250506060613a8687828801613617565b91505092959194509250565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ad482613562565b810181811067ffffffffffffffff82111715613af357613af2613a9c565b5b80604052505050565b6000613b06613472565b9050613b128282613acb565b919050565b600067ffffffffffffffff821115613b3257613b31613a9c565b5b613b3b82613562565b9050602081019050919050565b82818337600083830152505050565b6000613b6a613b6584613b17565b613afc565b905082815260208101848484011115613b8657613b85613a97565b5b613b91848285613b48565b509392505050565b600082601f830112613bae57613bad613a92565b5b8135613bbe848260208601613b57565b91505092915050565b600067ffffffffffffffff821115613be257613be1613a9c565b5b613beb82613562565b9050602081019050919050565b6000613c0b613c0684613bc7565b613afc565b905082815260208101848484011115613c2757613c26613a97565b5b613c32848285613b48565b509392505050565b600082601f830112613c4f57613c4e613a92565b5b8135613c5f848260208601613bf8565b91505092915050565b60008060008060808587031215613c8257613c8161347c565b5b6000613c90878288016134a7565b945050602085013567ffffffffffffffff811115613cb157613cb0613481565b5b613cbd87828801613b99565b9350506040613cce878288016134a7565b925050606085013567ffffffffffffffff811115613cef57613cee613481565b5b613cfb87828801613c3a565b91505092959194509250565b600060208284031215613d1d57613d1c61347c565b5b6000613d2b84828501613617565b91505092915050565b60008060408385031215613d4b57613d4a61347c565b5b6000613d59858286016134a7565b9250506020613d6a858286016134a7565b9150509250929050565b613d7d816138d8565b82525050565b600060e082019050613d98600083018a6136ff565b613da560208301896136ff565b613db26040830188613d74565b613dbf6060830187613676565b613dcc6080830186613676565b613dd960a08301856134e9565b81810360c0830152613deb8184613573565b905098975050505050505050565b6000819050919050565b613e14613e0f82613486565b613df9565b82525050565b6000613e268285613e03565b602082019150613e368284613e03565b6020820191508190509392505050565b6000604082019050613e5b600083018561370e565b613e68602083018461370e565b9392505050565b6000819050919050565b613e8a613e858261366c565b613e6f565b82525050565b6000613e9c8285613e03565b602082019150613eac8284613e79565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ef68261366c565b9150613f018361366c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f3657613f35613ebc565b5b828201905092915050565b6000613f4c8261366c565b9150613f578361366c565b925082821015613f6a57613f69613ebc565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613faf8261366c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fe257613fe1613ebc565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061402360208361351e565b915061402e82613fed565b602082019050919050565b6000602082019050818103600083015261405281614016565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006140b5602e8361351e565b91506140c082614059565b604082019050919050565b600060208201905081810360008301526140e4816140a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061413257607f821691505b60208210811415614146576141456140eb565b5b50919050565b6000614157826138d8565b9150614162836138d8565b92508260ff0382111561417857614177613ebc565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006141bd826138d8565b91506141c8836138d8565b9250826141d8576141d7614183565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061420a826141e3565b61421481856141ee565b935061422481856020860161352f565b61422d81613562565b840191505092915050565b6000606082019050818103600083015261425281866141ff565b905061426160208301856134e9565b81810360408301526142738184613573565b9050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006142d960268361351e565b91506142e48261427d565b604082019050919050565b60006020820190508181036000830152614308816142cc565b9050919050565b60008151905061431e81613600565b92915050565b60006020828403121561433a5761433961347c565b5b60006143488482850161430f565b9150509291505056fea2646970667358221220731999a30fada2a3b77f24d40ffb37e53aac0c255945832747f11a98e5c8a1c664736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "publishVersion(bytes32,bytes,bytes32,string)": {
        "details": "Publish a new version of a package.",
        "params": {
          "buildMetadata": "Metadata for the build of the version.",
          "location": "The IPFS hash where the contents of the version are stored.",
          "packageId": "The ID of a package.",
          "versionBytes": "The encoded bytes of a version string. The first byte is the number of identifiers (3-15). The rest of the bytes are base64 encoded identifiers. Identifiers are grouped two by two. Two identifiers per 32 bytes. 14 bits = empty 1 bit = isLatestPrereleaseAlphanumeric 120 bits = latestPrereleaseVersion; 1 bit = isLatestReleaseAlphanumeric 120 bits = latestReleaseVersion;"
        },
        "returns": {
          "nodeId": "ID of the published version."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "version(bytes32)": {
        "details": "Get the details of a version node.",
        "params": {
          "nodeId": "The ID of a version."
        },
        "returns": {
          "buildMetadata": "Metadata for the build of the version.",
          "exists": "Boolean indicating whether or not the node exists.",
          "latestPrereleaseVersion": "The identifier of the latest prerelease version.",
          "latestReleaseVersion": "The identifier of the latest release version.",
          "leaf": "Boolean indicating whether the node is a leaf node (does not contain children).",
          "level": "The level of the identifier for the node.",
          "location": "The IPFS hash where the contents of the version are stored."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5320,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5323,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5403,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5313,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11530,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "organizations",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(Organization)11516_storage)"
      },
      {
        "astId": 11533,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "organizationList",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 11538,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "packages",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_struct(Package)11525_storage)"
      },
      {
        "astId": 12336,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "versionNodes",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_bytes32,t_struct(VersionNode)12331_storage)"
      },
      {
        "astId": 12341,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "packageVersionLists",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 11358,
        "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
        "label": "domainRegistryLinks",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(Organization)11516_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PackageRegistryV1.Organization)",
        "numberOfBytes": "32",
        "value": "t_struct(Organization)11516_storage"
      },
      "t_mapping(t_bytes32,t_struct(Package)11525_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PackageRegistryV1.Package)",
        "numberOfBytes": "32",
        "value": "t_struct(Package)11525_storage"
      },
      "t_mapping(t_bytes32,t_struct(VersionNode)12331_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VersionRegistryV1.VersionNode)",
        "numberOfBytes": "32",
        "value": "t_struct(VersionNode)12331_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Organization)11516_storage": {
        "encoding": "inplace",
        "label": "struct PackageRegistryV1.Organization",
        "members": [
          {
            "astId": 11508,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11510,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11512,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "controller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11515,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "packageList",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Package)11525_storage": {
        "encoding": "inplace",
        "label": "struct PackageRegistryV1.Package",
        "members": [
          {
            "astId": 11518,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11520,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11522,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "controller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11524,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "organizationId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VersionNode)12331_storage": {
        "encoding": "inplace",
        "label": "struct VersionRegistryV1.VersionNode",
        "members": [
          {
            "astId": 12326,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "versionMetadata",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12328,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "buildMetadata",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 12330,
            "contract": "contracts/versioning/registry/v1/PolywrapRegistryV1.sol:PolywrapRegistryV1",
            "label": "location",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}