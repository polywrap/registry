/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VersionVerificationManagerInterface extends utils.Interface {
  functions: {
    "initialize(address)": FunctionFragment;
    "isValidProof(bytes32[],bool[],bytes32,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "publishVersion(bytes32,bytes32,uint256,uint256,uint256,string,bytes32[],bool[])": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry(address)": FunctionFragment;
    "updateVerificationRoot(bytes32)": FunctionFragment;
    "updateVerificationRootUpdater(address)": FunctionFragment;
    "verificationRoot()": FunctionFragment;
    "verificationRootUpdater()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidProof",
    values: [BytesLike[], boolean[], BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishVersion",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike[],
      boolean[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerificationRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerificationRootUpdater",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verificationRootUpdater",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerificationRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerificationRootUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationRootUpdater",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VersionPublished(bytes32,bytes32,bytes32,uint256,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionPublished"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type VersionPublishedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string],
  {
    packageId: string;
    verifiedVersionId: string;
    patchNodeId: string;
    major: BigNumber;
    minor: BigNumber;
    patch: BigNumber;
    location: string;
  }
>;

export type VersionPublishedEventFilter =
  TypedEventFilter<VersionPublishedEvent>;

export interface VersionVerificationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VersionVerificationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isValidProof(
      proof: BytesLike[],
      sides: boolean[],
      patchNodeId: BytesLike,
      location: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publishVersion(
      packageId: BytesLike,
      patchNodeId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      location: string,
      proof: BytesLike[],
      sides: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVerificationRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVerificationRootUpdater(
      _verificationRootUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verificationRoot(overrides?: CallOverrides): Promise<[string]>;

    verificationRootUpdater(overrides?: CallOverrides): Promise<[string]>;
  };

  initialize(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isValidProof(
    proof: BytesLike[],
    sides: boolean[],
    patchNodeId: BytesLike,
    location: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  publishVersion(
    packageId: BytesLike,
    patchNodeId: BytesLike,
    majorVersion: BigNumberish,
    minorVersion: BigNumberish,
    patchVersion: BigNumberish,
    location: string,
    proof: BytesLike[],
    sides: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVerificationRoot(
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVerificationRootUpdater(
    _verificationRootUpdater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verificationRoot(overrides?: CallOverrides): Promise<string>;

  verificationRootUpdater(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    initialize(_registry: string, overrides?: CallOverrides): Promise<void>;

    isValidProof(
      proof: BytesLike[],
      sides: boolean[],
      patchNodeId: BytesLike,
      location: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    publishVersion(
      packageId: BytesLike,
      patchNodeId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      location: string,
      proof: BytesLike[],
      sides: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    updateVerificationRoot(
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVerificationRootUpdater(
      _verificationRootUpdater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verificationRoot(overrides?: CallOverrides): Promise<string>;

    verificationRootUpdater(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "VersionPublished(bytes32,bytes32,bytes32,uint256,uint256,uint256,string)"(
      packageId?: BytesLike | null,
      verifiedVersionId?: BytesLike | null,
      patchNodeId?: BytesLike | null,
      major?: null,
      minor?: null,
      patch?: null,
      location?: null
    ): VersionPublishedEventFilter;
    VersionPublished(
      packageId?: BytesLike | null,
      verifiedVersionId?: BytesLike | null,
      patchNodeId?: BytesLike | null,
      major?: null,
      minor?: null,
      patch?: null,
      location?: null
    ): VersionPublishedEventFilter;
  };

  estimateGas: {
    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isValidProof(
      proof: BytesLike[],
      sides: boolean[],
      patchNodeId: BytesLike,
      location: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publishVersion(
      packageId: BytesLike,
      patchNodeId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      location: string,
      proof: BytesLike[],
      sides: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVerificationRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVerificationRootUpdater(
      _verificationRootUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verificationRoot(overrides?: CallOverrides): Promise<BigNumber>;

    verificationRootUpdater(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isValidProof(
      proof: BytesLike[],
      sides: boolean[],
      patchNodeId: BytesLike,
      location: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishVersion(
      packageId: BytesLike,
      patchNodeId: BytesLike,
      majorVersion: BigNumberish,
      minorVersion: BigNumberish,
      patchVersion: BigNumberish,
      location: string,
      proof: BytesLike[],
      sides: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVerificationRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVerificationRootUpdater(
      _verificationRootUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verificationRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verificationRootUpdater(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
