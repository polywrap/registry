/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVersionRegistryInterface extends ethers.utils.Interface {
  functions: {
    "publishVersion(bytes32,bytes,bytes32,string)": FunctionFragment;
    "version(bytes32)": FunctionFragment;
    "versionBuildMetadata(bytes32)": FunctionFragment;
    "versionCount(bytes32)": FunctionFragment;
    "versionIds(bytes32,uint256,uint256)": FunctionFragment;
    "versionLocation(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "publishVersion",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "versionBuildMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionIds",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "versionLocation",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "publishVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionBuildMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionLocation",
    data: BytesLike
  ): Result;

  events: {
    "TrustedVersionPublisherSet(address)": EventFragment;
    "VersionPublished(bytes32,bytes32,bytes,bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TrustedVersionPublisherSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionPublished"): EventFragment;
}

export type TrustedVersionPublisherSetEvent = TypedEvent<
  [string] & { trustedVersionPublisher: string }
>;

export type VersionPublishedEvent = TypedEvent<
  [string, string, string, string, string] & {
    packageId: string;
    versionNodeId: string;
    versionBytes: string;
    buildMetadata: string;
    location: string;
  }
>;

export class IVersionRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVersionRegistryInterface;

  functions: {
    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, number, BigNumber, BigNumber, string, string] & {
        leaf: boolean;
        created: boolean;
        level: number;
        latestPrereleaseVersion: BigNumber;
        latestReleaseVersion: BigNumber;
        buildMetadata: string;
        location: string;
      }
    >;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  publishVersion(
    packageId: BytesLike,
    versionBytes: BytesLike,
    buildMetadata: BytesLike,
    location: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, number, BigNumber, BigNumber, string, string] & {
      leaf: boolean;
      created: boolean;
      level: number;
      latestPrereleaseVersion: BigNumber;
      latestReleaseVersion: BigNumber;
      buildMetadata: string;
      location: string;
    }
  >;

  versionBuildMetadata(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  versionCount(
    packageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  versionIds(
    packageId: BytesLike,
    start: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  versionLocation(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: CallOverrides
    ): Promise<string>;

    version(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, number, BigNumber, BigNumber, string, string] & {
        leaf: boolean;
        created: boolean;
        level: number;
        latestPrereleaseVersion: BigNumber;
        latestReleaseVersion: BigNumber;
        buildMetadata: string;
        location: string;
      }
    >;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "TrustedVersionPublisherSet(address)"(
      trustedVersionPublisher?: null
    ): TypedEventFilter<[string], { trustedVersionPublisher: string }>;

    TrustedVersionPublisherSet(
      trustedVersionPublisher?: null
    ): TypedEventFilter<[string], { trustedVersionPublisher: string }>;

    "VersionPublished(bytes32,bytes32,bytes,bytes32,string)"(
      packageId?: BytesLike | null,
      versionNodeId?: BytesLike | null,
      versionBytes?: null,
      buildMetadata?: null,
      location?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        packageId: string;
        versionNodeId: string;
        versionBytes: string;
        buildMetadata: string;
        location: string;
      }
    >;

    VersionPublished(
      packageId?: BytesLike | null,
      versionNodeId?: BytesLike | null,
      versionBytes?: null,
      buildMetadata?: null,
      location?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        packageId: string;
        versionNodeId: string;
        versionBytes: string;
        buildMetadata: string;
        location: string;
      }
    >;
  };

  estimateGas: {
    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(nodeId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
