/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrganizationOwnershipManagerV1Interface
  extends ethers.utils.Interface {
  functions: {
    "claimOrganizationOwnership(bytes32,bytes32,address)": FunctionFragment;
    "domainOwner(bytes32,bytes32)": FunctionFragment;
    "domainRegistryLinks(bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "latestPrereleaseLocation(bytes32)": FunctionFragment;
    "latestPrereleaseNode(bytes32)": FunctionFragment;
    "latestReleaseLocation(bytes32)": FunctionFragment;
    "latestReleaseNode(bytes32)": FunctionFragment;
    "organization(bytes32)": FunctionFragment;
    "organizationController(bytes32)": FunctionFragment;
    "organizationCount()": FunctionFragment;
    "organizationExists(bytes32)": FunctionFragment;
    "organizationIds(uint256,uint256)": FunctionFragment;
    "organizationOwner(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "package(bytes32)": FunctionFragment;
    "packageController(bytes32)": FunctionFragment;
    "packageCount(bytes32)": FunctionFragment;
    "packageExists(bytes32)": FunctionFragment;
    "packageIds(bytes32,uint256,uint256)": FunctionFragment;
    "packageOrganizationId(bytes32)": FunctionFragment;
    "packageOwner(bytes32)": FunctionFragment;
    "publishVersion(bytes32,bytes,bytes32,string)": FunctionFragment;
    "registerPackage(bytes32,bytes32,address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOrganizationController(bytes32,address)": FunctionFragment;
    "setPackageController(bytes32,address)": FunctionFragment;
    "setPackageOwner(bytes32,address)": FunctionFragment;
    "transferOrganizationControl(bytes32,address)": FunctionFragment;
    "transferOrganizationOwnership(bytes32,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPackageControl(bytes32,address)": FunctionFragment;
    "transferPackageOwnership(bytes32,address)": FunctionFragment;
    "version(bytes32)": FunctionFragment;
    "versionBuildMetadata(bytes32)": FunctionFragment;
    "versionCount(bytes32)": FunctionFragment;
    "versionIds(bytes32,uint256,uint256)": FunctionFragment;
    "versionLocation(bytes32)": FunctionFragment;
    "versionMetadata(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimOrganizationOwnership",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainOwner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainRegistryLinks",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrereleaseLocation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrereleaseNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestReleaseLocation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestReleaseNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationController",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "organizationExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "package", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "packageController",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "packageCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "packageExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "packageIds",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "packageOrganizationId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "packageOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishVersion",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPackage",
    values: [BytesLike, BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOrganizationController",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPackageController",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPackageOwner",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOrganizationControl",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOrganizationOwnership",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPackageControl",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPackageOwnership",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "versionBuildMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionIds",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "versionLocation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionMetadata",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimOrganizationOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainRegistryLinks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestPrereleaseLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPrereleaseNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestReleaseLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestReleaseNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "package", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packageController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "packageIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packageOrganizationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrganizationController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPackageController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPackageOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOrganizationControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOrganizationOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPackageControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPackageOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionBuildMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionMetadata",
    data: BytesLike
  ): Result;

  events: {
    "OrganizationClaimed(bytes32,address)": EventFragment;
    "OrganizationControllerChanged(bytes32,address,address)": EventFragment;
    "OrganizationOwnerChanged(bytes32,address,address)": EventFragment;
    "OrganizationOwnershipClaimed(bytes32,bytes32,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PackageControllerChanged(bytes32,address,address)": EventFragment;
    "PackageOwnerChanged(bytes32,address,address)": EventFragment;
    "PackageRegistered(bytes32,bytes32,bytes32,address,address)": EventFragment;
    "TrustedVersionPublisherSet(address)": EventFragment;
    "VersionPublished(bytes32,bytes32,bytes,bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrganizationClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrganizationControllerChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrganizationOwnerChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrganizationOwnershipClaimed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedVersionPublisherSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionPublished"): EventFragment;
}

export type OrganizationClaimedEvent = TypedEvent<
  [string, string] & { organizationId: string; owner: string }
>;

export type OrganizationControllerChangedEvent = TypedEvent<
  [string, string, string] & {
    organizationId: string;
    previousController: string;
    newController: string;
  }
>;

export type OrganizationOwnerChangedEvent = TypedEvent<
  [string, string, string] & {
    organizationId: string;
    previousOwner: string;
    newOwner: string;
  }
>;

export type OrganizationOwnershipClaimedEvent = TypedEvent<
  [string, string, string, string] & {
    domainRegistry: string;
    domainRegistryNode: string;
    domainOwner: string;
    newOrganizationOwner: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PackageControllerChangedEvent = TypedEvent<
  [string, string, string] & {
    packageId: string;
    previousController: string;
    newController: string;
  }
>;

export type PackageOwnerChangedEvent = TypedEvent<
  [string, string, string] & {
    packageId: string;
    previousOwner: string;
    newOwner: string;
  }
>;

export type PackageRegisteredEvent = TypedEvent<
  [string, string, string, string, string] & {
    organizationId: string;
    packageId: string;
    packageName: string;
    packageOwner: string;
    packageController: string;
  }
>;

export type TrustedVersionPublisherSetEvent = TypedEvent<
  [string] & { trustedVersionPublisher: string }
>;

export type VersionPublishedEvent = TypedEvent<
  [string, string, string, string, string] & {
    packageId: string;
    versionNodeId: string;
    versionBytes: string;
    buildMetadata: string;
    location: string;
  }
>;

export class OrganizationOwnershipManagerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrganizationOwnershipManagerV1Interface;

  functions: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    domainRegistryLinks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestPrereleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { location: string }>;

    latestPrereleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { nodeId: string }>;

    latestReleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { location: string }>;

    latestReleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { nodeId: string }>;

    organization(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        exists: boolean;
        owner: string;
        controller: string;
      }
    >;

    organizationController(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    organizationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    organizationExists(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    organizationIds(
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    organizationOwner(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    package(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string] & {
        exists: boolean;
        owner: string;
        controller: string;
        organizationId: string;
      }
    >;

    packageController(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    packageCount(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    packageExists(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    packageIds(
      organizationId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    packageOrganizationId(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    packageOwner(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPackage(
      organizationId: BytesLike,
      packageName: BytesLike,
      packageOwner: string,
      packageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrganizationController(
      organizationId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPackageController(
      packageId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPackageOwner(
      packageId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOrganizationControl(
      organizationId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOrganizationOwnership(
      organizationId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPackageControl(
      packageId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPackageOwnership(
      packageId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, number, BigNumber, BigNumber, string, string] & {
        exists: boolean;
        leaf: boolean;
        level: number;
        latestPrereleaseVersion: BigNumber;
        latestReleaseVersion: BigNumber;
        buildMetadata: string;
        location: string;
      }
    >;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    versionMetadata(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, number, BigNumber, BigNumber] & {
          exists: boolean;
          leaf: boolean;
          level: number;
          latestPrereleaseVersion: BigNumber;
          latestReleaseVersion: BigNumber;
        }
      ] & {
        nodeInfo: [boolean, boolean, number, BigNumber, BigNumber] & {
          exists: boolean;
          leaf: boolean;
          level: number;
          latestPrereleaseVersion: BigNumber;
          latestReleaseVersion: BigNumber;
        };
      }
    >;
  };

  claimOrganizationOwnership(
    domainRegistry: BytesLike,
    domainRegistryNode: BytesLike,
    newOrganizationOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainOwner(
    domainRegistry: BytesLike,
    domainRegistryNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  domainRegistryLinks(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestPrereleaseLocation(
    versionNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  latestPrereleaseNode(
    versionNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  latestReleaseLocation(
    versionNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  latestReleaseNode(
    versionNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  organization(
    organizationId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & {
      exists: boolean;
      owner: string;
      controller: string;
    }
  >;

  organizationController(
    organizationId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  organizationCount(overrides?: CallOverrides): Promise<BigNumber>;

  organizationExists(
    organizationId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  organizationIds(
    start: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  organizationOwner(
    organizationId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  package(
    packageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, string] & {
      exists: boolean;
      owner: string;
      controller: string;
      organizationId: string;
    }
  >;

  packageController(
    packageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  packageCount(
    organizationId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  packageExists(
    packageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  packageIds(
    organizationId: BytesLike,
    start: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  packageOrganizationId(
    packageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  packageOwner(
    packageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  publishVersion(
    packageId: BytesLike,
    versionBytes: BytesLike,
    buildMetadata: BytesLike,
    location: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPackage(
    organizationId: BytesLike,
    packageName: BytesLike,
    packageOwner: string,
    packageController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrganizationController(
    organizationId: BytesLike,
    newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPackageController(
    packageId: BytesLike,
    newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPackageOwner(
    packageId: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOrganizationControl(
    organizationId: BytesLike,
    newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOrganizationOwnership(
    organizationId: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPackageControl(
    packageId: BytesLike,
    newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPackageOwnership(
    packageId: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, number, BigNumber, BigNumber, string, string] & {
      exists: boolean;
      leaf: boolean;
      level: number;
      latestPrereleaseVersion: BigNumber;
      latestReleaseVersion: BigNumber;
      buildMetadata: string;
      location: string;
    }
  >;

  versionBuildMetadata(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  versionCount(
    packageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  versionIds(
    packageId: BytesLike,
    start: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  versionLocation(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  versionMetadata(
    versionNodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, number, BigNumber, BigNumber] & {
      exists: boolean;
      leaf: boolean;
      level: number;
      latestPrereleaseVersion: BigNumber;
      latestReleaseVersion: BigNumber;
    }
  >;

  callStatic: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    domainRegistryLinks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    latestPrereleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    latestPrereleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    latestReleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    latestReleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    organization(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        exists: boolean;
        owner: string;
        controller: string;
      }
    >;

    organizationController(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    organizationCount(overrides?: CallOverrides): Promise<BigNumber>;

    organizationExists(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    organizationIds(
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    organizationOwner(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    package(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string] & {
        exists: boolean;
        owner: string;
        controller: string;
        organizationId: string;
      }
    >;

    packageController(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    packageCount(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageExists(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    packageIds(
      organizationId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    packageOrganizationId(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    packageOwner(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: CallOverrides
    ): Promise<string>;

    registerPackage(
      organizationId: BytesLike,
      packageName: BytesLike,
      packageOwner: string,
      packageController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOrganizationController(
      organizationId: BytesLike,
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPackageController(
      packageId: BytesLike,
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPackageOwner(
      packageId: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOrganizationControl(
      organizationId: BytesLike,
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOrganizationOwnership(
      organizationId: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPackageControl(
      packageId: BytesLike,
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPackageOwnership(
      packageId: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, number, BigNumber, BigNumber, string, string] & {
        exists: boolean;
        leaf: boolean;
        level: number;
        latestPrereleaseVersion: BigNumber;
        latestReleaseVersion: BigNumber;
        buildMetadata: string;
        location: string;
      }
    >;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    versionMetadata(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, number, BigNumber, BigNumber] & {
        exists: boolean;
        leaf: boolean;
        level: number;
        latestPrereleaseVersion: BigNumber;
        latestReleaseVersion: BigNumber;
      }
    >;
  };

  filters: {
    "OrganizationClaimed(bytes32,address)"(
      organizationId?: BytesLike | null,
      owner?: string | null
    ): TypedEventFilter<
      [string, string],
      { organizationId: string; owner: string }
    >;

    OrganizationClaimed(
      organizationId?: BytesLike | null,
      owner?: string | null
    ): TypedEventFilter<
      [string, string],
      { organizationId: string; owner: string }
    >;

    "OrganizationControllerChanged(bytes32,address,address)"(
      organizationId?: BytesLike | null,
      previousController?: string | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string, string],
      {
        organizationId: string;
        previousController: string;
        newController: string;
      }
    >;

    OrganizationControllerChanged(
      organizationId?: BytesLike | null,
      previousController?: string | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string, string],
      {
        organizationId: string;
        previousController: string;
        newController: string;
      }
    >;

    "OrganizationOwnerChanged(bytes32,address,address)"(
      organizationId?: BytesLike | null,
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { organizationId: string; previousOwner: string; newOwner: string }
    >;

    OrganizationOwnerChanged(
      organizationId?: BytesLike | null,
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { organizationId: string; previousOwner: string; newOwner: string }
    >;

    "OrganizationOwnershipClaimed(bytes32,bytes32,address,address)"(
      domainRegistry?: BytesLike | null,
      domainRegistryNode?: BytesLike | null,
      domainOwner?: null,
      newOrganizationOwner?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        domainRegistry: string;
        domainRegistryNode: string;
        domainOwner: string;
        newOrganizationOwner: string;
      }
    >;

    OrganizationOwnershipClaimed(
      domainRegistry?: BytesLike | null,
      domainRegistryNode?: BytesLike | null,
      domainOwner?: null,
      newOrganizationOwner?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        domainRegistry: string;
        domainRegistryNode: string;
        domainOwner: string;
        newOrganizationOwner: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PackageControllerChanged(bytes32,address,address)"(
      packageId?: null,
      previousController?: string | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { packageId: string; previousController: string; newController: string }
    >;

    PackageControllerChanged(
      packageId?: null,
      previousController?: string | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { packageId: string; previousController: string; newController: string }
    >;

    "PackageOwnerChanged(bytes32,address,address)"(
      packageId?: null,
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { packageId: string; previousOwner: string; newOwner: string }
    >;

    PackageOwnerChanged(
      packageId?: null,
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { packageId: string; previousOwner: string; newOwner: string }
    >;

    "PackageRegistered(bytes32,bytes32,bytes32,address,address)"(
      organizationId?: BytesLike | null,
      packageId?: BytesLike | null,
      packageName?: BytesLike | null,
      packageOwner?: null,
      packageController?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        organizationId: string;
        packageId: string;
        packageName: string;
        packageOwner: string;
        packageController: string;
      }
    >;

    PackageRegistered(
      organizationId?: BytesLike | null,
      packageId?: BytesLike | null,
      packageName?: BytesLike | null,
      packageOwner?: null,
      packageController?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        organizationId: string;
        packageId: string;
        packageName: string;
        packageOwner: string;
        packageController: string;
      }
    >;

    "TrustedVersionPublisherSet(address)"(
      trustedVersionPublisher?: null
    ): TypedEventFilter<[string], { trustedVersionPublisher: string }>;

    TrustedVersionPublisherSet(
      trustedVersionPublisher?: null
    ): TypedEventFilter<[string], { trustedVersionPublisher: string }>;

    "VersionPublished(bytes32,bytes32,bytes,bytes32,string)"(
      packageId?: BytesLike | null,
      versionNodeId?: BytesLike | null,
      versionBytes?: null,
      buildMetadata?: null,
      location?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        packageId: string;
        versionNodeId: string;
        versionBytes: string;
        buildMetadata: string;
        location: string;
      }
    >;

    VersionPublished(
      packageId?: BytesLike | null,
      versionNodeId?: BytesLike | null,
      versionBytes?: null,
      buildMetadata?: null,
      location?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        packageId: string;
        versionNodeId: string;
        versionBytes: string;
        buildMetadata: string;
        location: string;
      }
    >;
  };

  estimateGas: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainRegistryLinks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestPrereleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPrereleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestReleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestReleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organization(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organizationController(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organizationCount(overrides?: CallOverrides): Promise<BigNumber>;

    organizationExists(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organizationIds(
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organizationOwner(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    package(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageController(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageCount(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageExists(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageIds(
      organizationId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageOrganizationId(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageOwner(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPackage(
      organizationId: BytesLike,
      packageName: BytesLike,
      packageOwner: string,
      packageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrganizationController(
      organizationId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPackageController(
      packageId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPackageOwner(
      packageId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOrganizationControl(
      organizationId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOrganizationOwnership(
      organizationId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPackageControl(
      packageId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPackageOwnership(
      packageId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(nodeId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionMetadata(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimOrganizationOwnership(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      newOrganizationOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainOwner(
      domainRegistry: BytesLike,
      domainRegistryNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainRegistryLinks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestPrereleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPrereleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestReleaseLocation(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestReleaseNode(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organization(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organizationController(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organizationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organizationExists(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organizationIds(
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organizationOwner(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    package(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packageController(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packageCount(
      organizationId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packageExists(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packageIds(
      organizationId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packageOrganizationId(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packageOwner(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishVersion(
      packageId: BytesLike,
      versionBytes: BytesLike,
      buildMetadata: BytesLike,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPackage(
      organizationId: BytesLike,
      packageName: BytesLike,
      packageOwner: string,
      packageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrganizationController(
      organizationId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPackageController(
      packageId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPackageOwner(
      packageId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOrganizationControl(
      organizationId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOrganizationOwnership(
      organizationId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPackageControl(
      packageId: BytesLike,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPackageOwnership(
      packageId: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionBuildMetadata(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionCount(
      packageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionIds(
      packageId: BytesLike,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionLocation(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionMetadata(
      versionNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
